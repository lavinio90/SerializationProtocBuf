// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkloadStampsProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from WorkloadStampsProto.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class WorkloadStampsProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for WorkloadStampsProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static WorkloadStampsProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChlXb3JrbG9hZFN0YW1wc1Byb3RvLnByb3RvInEKF1dvcmtsb2FkVGltZVN0",
          "YW1wc1Byb3RvEhMKC190aW1lc3RhbXBzGAEgAygDEhQKDF9zeW1tZXRyaXhJ",
          "ZBgCIAEoCRIrCgVfZGF0YRgDIAMoCzIcLktQSUNhdGVnb3J5S1BJQ29tcG9u",
          "ZW50UGFpciK8AQoMS1BJQ29tcG9uZW50Eh4KCGNhdGVnb3J5GAEgASgOMgwu",
          "S1BJQ2F0ZWdvcnkSLwoJaW5zdGFuY2VzGAIgAygLMhwuS1BJQ29tcG9uZW50",
          "Lkluc3RhbmNlc0VudHJ5EhsKB21ldHJpY3MYAyADKA4yCi5LUElNZXRyaWMa",
          "PgoOSW5zdGFuY2VzRW50cnkSCwoDa2V5GAEgASgJEhsKBXZhbHVlGAIgASgL",
          "MgwuS1BJSW5zdGFuY2U6AjgBImYKC0tQSUluc3RhbmNlEikKBnZhbHVlcxgB",
          "IAMoCzIZLktQSU1ldHJpY0RvdWJsZUFycmF5UGFpchIMCgRuYW1lGAIgASgJ",
          "Eh4KCGNhdGVnb3J5GAMgASgOMgwuS1BJQ2F0ZWdvcnkiUAoYS1BJTWV0cmlj",
          "RG91YmxlQXJyYXlQYWlyEhcKA2tleRgBIAEoDjIKLktQSU1ldHJpYxIbCgV2",
          "YWx1ZRgCIAEoCzIMLkRvdWJsZUFycmF5IlYKG0tQSUNhdGVnb3J5S1BJQ29t",
          "cG9uZW50UGFpchIZCgNrZXkYASABKA4yDC5LUElDYXRlZ29yeRIcCgV2YWx1",
          "ZRgCIAEoCzINLktQSUNvbXBvbmVudCIcCgtEb3VibGVBcnJheRINCgVhcnJh",
          "eRgBIAMoASrmBQoLS1BJQ2F0ZWdvcnkSCQoFQVJSQVkQABIKCgZERVZJQ0UQ",
          "ARIKCgZGRV9ESVIQAhIKCgZCRV9ESVIQAxILCgdSREZfRElSEAQSCAoERElT",
          "SxAFEgsKB0ZFX1BPUlQQBhIGCgJDUBAHEgwKCFJERkFfR1JQEAgSDAoIUkRG",
          "X0xJTksQCRIJCgVFVkVOVBAKEgwKCERFVl9QT09MEAsSDQoJVEhJTl9QT09M",
          "EAwSCwoHUkRGX0RFVhANEgwKCERFVl9DQUNIEA4SDAoIRVhUX0RJU0sQDxIJ",
          "CgVCT0FSRBAQEhEKDURFVl9GUk9OVF9FTkQQERIQCgxERVZfQkFDS19FTkQQ",
          "EhITCg9ERVZJQ0VfTE9DQUxJVFkQExIOCgpSREZfU1lTVEVNEBQSFgoSUkRG",
          "X05XX0NPTVBSRVNTSU9OEBUSEAoMU1BETE1UX0dST1VQEBYSEgoOVENQX0NP",
          "Tk5FQ1RJT04QFxIPCgtESVJfTkVUV09SSxAYEhAKDE5XX0lOVEVSRkFDRRAZ",
          "EgwKCE9SU19QT1JUEBoSDgoKT1JTX0RFVklDRRAbEg8KC0ZFX0RJUl9QT1JU",
          "EBwSEAoMUkRGX0RJUl9QT1JUEB0SDwoLQkVfRElSX1BPUlQQHhILCgdFRFNf",
          "RElSEB8SEgoOQ09OVEFJTkVSX1BPUlQQIBIHCgNHT1MQIRIKCgZJTV9ESVIQ",
          "IhILCgdJTV9TTElDECMSCAoEQ09SRRAkEgwKCENPUkVfRURTECUSCwoHQ09S",
          "RV9JTRAmEgsKB0NPUkVfRkUQJxILCgdDT1JFX0JFECgSDAoIQ09SRV9SREYQ",
          "KRIOCgpDT1JFX0ZJQ09OECoSEAoMSVNDU0lfQ0xJRU5UECsSEAoMSVNDU0lf",
          "VEFSR0VUECwSDgoKRElTS19HUk9VUBAtEhgKFERFVl9QT09MX0FMTE9DQVRJ",
          "T05TEC4SDQoJSU5JVElBVE9SEC8SCgoGSEVBREVSEDAqyT8KCUtQSU1ldHJp",
          "YxIuCippbV9kaXJfbWVtb3J5X3BhZ2VfZmFsbF90aHJvdWdoX3RpbWVfdG90",
          "YWwQABIiCh5pbV9kaXJfbWVtb3J5X3BhZ2VfdXNhZ2VfdG90YWwQARIeChpl",
          "ZHNfZGlyX3JhbmRvbV9yZWFkX21pc3NlcxACEiUKIWVkc19kaXJfcmFuZG9t",
          "X3JlYWRfbWlzc2VzX2tieXRlcxADEh8KG2Vkc19kaXJfcmFuZG9tX3dyaXRl",
          "X21pc3NlcxAEEiYKImVkc19kaXJfcmFuZG9tX3dyaXRlX21pc3Nlc19rYnl0",
          "ZXMQBRIZChVyZGZkaXJfbnVtS2J5dGVzUmVjdmQQBhIYChRyZGZkaXJfbnVt",
          "S2J5dGVzU2VudBAHEh4KGnJkZmRpcl90b3RhbF9jb3B5X2lvX2NvdW50EAgS",
          "HwobcmRmZGlyX3RvdGFsX2NvcHlfaW9fa2J5dGVzEAkSIgoecmRmZGlyX3Rv",
          "dGFsX3NyZGZzX3dyaXRlX2NvdW50EAoSEwoPY29yZV90aW1lX3N0YW1wEAsS",
          "GAoUY29yZV9zeW1ta19pZGxlX3RpbWUQDBIWChJjb3JlX2ltX3RpbWVfc3Rh",
          "bXAQDRIYChRjb3JlX2ltX3BhZ2VfaW5fdGltZRAOEhkKFWNvcmVfaW1fcGFn",
          "ZV9vdXRfdGltZRAPEh4KGmNvcmVfaW1fZW52aXJvbm1lbnRhbF90aW1lEBAS",
          "FgoSY29yZV9pbV9vdGhlcl90aW1lEBESHAoYY29yZV9pbV9zeW1ta190b3Rh",
          "bF90aW1lEBISFwoTY29yZV9lZHNfdGltZV9zdGFtcBATEhsKF2NvcmVfZWRz",
          "X2VtdWxhdGlvbl90aW1lEBQSHAoYY29yZV9lZHNfaW9fbWFjaGluZV90aW1l",
          "EBUSHwobY29yZV9lZHNfbHBfaW9fbWFjaGluZV90aW1lEBYSHgoaY29yZV9l",
          "ZHNfaG91c2VrZWVwaW5nX3RpbWUQFxIeChpjb3JlX2Vkc19scmVwX2NvbnRy",
          "b2xfdGltZRAYEhQKEGNvcmVfZWRzX3ZwX3RpbWUQGRIeChpjb3JlX2Vkc19j",
          "b3B5X3NjYW5uZXJfdGltZRAaEhkKFWNvcmVfZWRzX3B5cmFtaWRfdGltZRAb",
          "EhYKEmNvcmVfZWRzX3NjYW5fdGltZRAcEiAKHGNvcmVfZWRzX3Nub3dfc3Bp",
          "bGxvdmVyX3RpbWUQHRIkCiBjb3JlX2Vkc19yZW1vdGVfcmVwbGljYXRpb25f",
          "dGltZRAeEhoKFmNvcmVfZWRzX3N5c2NhbGxzX3RpbWUQHxIaChZjb3JlX2Vk",
          "c193YXRjaGRvZ190aW1lECASIgoeY29yZV9lZHNfYWxsb2NhdGlvbl9zcGxp",
          "dF90aW1lECESFQoRY29yZV9lZHNfZnNtX3RpbWUQIhIdChljb3JlX2Vkc19z",
          "eW1ta190b3RhbF90aW1lECMSFgoSY29yZV9mZV90aW1lX3N0YW1wECQSHAoY",
          "Y29yZV9mZV90b3RhbF9yZWFkc190aW1lECUSHQoZY29yZV9mZV90b3RhbF93",
          "cml0ZXNfdGltZRAmEhkKFWNvcmVfZmVfc3lzY2FsbHNfdGltZRAnEhoKFmNv",
          "cmVfZmVfbWFuYWdtZW50X3RpbWUQKBIaChZjb3JlX2ZlX2xpbmtfcG9ydF90",
          "aW1lECkSIAocY29yZV9mZV94cmNfcmVwbGljYXRpb25fdGltZRAqEhsKF2Nv",
          "cmVfZmVfemhwZl9yZWFkc190aW1lECsSHAoYY29yZV9mZV96aHBmX3dyaXRl",
          "c190aW1lECwSHwobY29yZV9mZV9vZHhfdmFhaV94Y29weV90aW1lEC0SJAog",
          "Y29yZV9mZV9vZHhfdmFhaV93cml0ZV9zYW1lX3RpbWUQLhIeChpjb3JlX2Zl",
          "X29keF92YWFpX2xvY2tfdGltZRAvEhQKEGNvcmVfZmVfY2RpX3RpbWUQMBIY",
          "ChRjb3JlX2ZlX2xwX3Rhc2tfdGltZRAxEhwKGGNvcmVfZmVfc3ltbWtfdG90",
          "YWxfdGltZRAyEhYKEmNvcmVfYmVfdGltZV9zdGFtcBAzEiIKHmNvcmVfYmVf",
          "dG90YWxfcmVhZF9taXNzZXNfdGltZRA0Eh0KGWNvcmVfYmVfdG90YWxfd3Jp",
          "dGVzX3RpbWUQNRIfChtjb3JlX2JlX3RvdGFsX3ByZWZldGNoX3RpbWUQNhIh",
          "Ch1jb3JlX2JlX3RvdGFsX2NvcHlfcmVhZHNfdGltZRA3EiIKHmNvcmVfYmVf",
          "dG90YWxfY29weV93cml0ZXNfdGltZRA4EhkKFWNvcmVfYmVfc3lzY2FsbHNf",
          "dGltZRA5EhoKFmNvcmVfYmVfbWFuYWdtZW50X3RpbWUQOhIYChRjb3JlX2Jl",
          "X3JlYnVpbGRfdGltZRA7EhYKEmNvcmVfYmVfaXZ0b2NfdGltZRA8EiUKIWNv",
          "cmVfYmVfc29mdHdhcmVfY29tcHJlc3Npb25fdGltZRA9EhYKEmNvcmVfYmVf",
          "b3RoZXJfdGltZRA+EhQKEGNvcmVfYmVfY2RpX3RpbWUQPxIYChRjb3JlX2Jl",
          "X2xwX3Rhc2tfdGltZRBAEhwKGGNvcmVfYmVfc3ltbWtfdG90YWxfdGltZRBB",
          "EhcKE2NvcmVfcmRmX3RpbWVfc3RhbXAQQhIdChljb3JlX3JkZl90b3RhbF9y",
          "ZWFkc190aW1lEEMSHgoaY29yZV9yZGZfdG90YWxfd3JpdGVzX3RpbWUQRBIi",
          "Ch5jb3JlX3JkZl90b3RhbF9jb3B5X3JlYWRzX3RpbWUQRRIjCh9jb3JlX3Jk",
          "Zl90b3RhbF9jb3B5X3dyaXRlc190aW1lEEYSGgoWY29yZV9yZGZfc3lzY2Fs",
          "bHNfdGltZRBHEhcKE2NvcmVfcmRmX290aGVyX3RpbWUQSBIZChVjb3JlX3Jk",
          "Zl9scF90YXNrX3RpbWUQSRIhCh1jb3JlX3JkZl9saW5rX21hbmFnZW1lbnRf",
          "dGltZRBKEiYKImNvcmVfcmRmX3NvZnR3YXJlX2NvbXByZXNzaW9uX3RpbWUQ",
          "SxIdChljb3JlX3JkZl9zeW1ta190b3RhbF90aW1lEEwSGQoVY29yZV9maWNv",
          "bl90aW1lX3N0YW1wEE0SJAogY29yZV9maWNvbl9yYW5kb21fcmVhZF9oaXRz",
          "X3RpbWUQThIlCiFjb3JlX2ZpY29uX3JhbmRvbV93cml0ZV9oaXRzX3RpbWUQ",
          "TxInCiNjb3JlX2ZpY29uX3JhbmRvbV93cml0ZV9taXNzZXNfdGltZRBQEiYK",
          "ImNvcmVfZmljb25fcmFuZG9tX3JlYWRfbWlzc2VzX3RpbWUQURIqCiZjb3Jl",
          "X2ZpY29uX3RvdGFsX3NlcXVlbnRpYWxfcmVhZHNfdGltZRBSEisKJ2NvcmVf",
          "Zmljb25fdG90YWxfc2VxdWVudGlhbF93cml0ZXNfdGltZRBTEhwKGGNvcmVf",
          "Zmljb25fc3lzY2FsbHNfdGltZRBUEh0KGWNvcmVfZmljb25fbWFuYWdtZW50",
          "X3RpbWUQVRIdChljb3JlX2ZpY29uX2xpbmtfcG9ydF90aW1lEFYSIwofY29y",
          "ZV9maWNvbl94cmNfcmVwbGljYXRpb25fdGltZRBXEh4KGmNvcmVfZmljb25f",
          "emhwZl9yZWFkc190aW1lEFgSHwobY29yZV9maWNvbl96aHBmX3dyaXRlc190",
          "aW1lEFkSFwoTY29yZV9maWNvbl9jZGlfdGltZRBaEhsKF2NvcmVfZmljb25f",
          "bHBfdGFza190aW1lEFsSHwobY29yZV9maWNvbl9zeW1ta190b3RhbF90aW1l",
          "EFwSEwoPZ29zX21lbW9yeV9zaXplEF0SEAoMZ29zX251bV9jcHVzEF4SIAoc",
          "cmRmYWdycF9zeXNXcml0ZVBlbmRpbmdDb3VudBBfEhkKFXJkZmFncnBfZHNl",
          "VHJhY2tzVXNlZBBgEh0KGXJkZmFncnBfaG9zdFdyaXRlTnVtSW9SZXEQYRIe",
          "ChpyZGZhZ3JwX2hvc3RXcml0ZU51bU1ieXRlcxBiEhIKDmJlZGlyX251bUlv",
          "UmVxEGMSGAoUYmVkaXJfZGlyVXRpbGl6YXRpb24QZBIYChRiZWRpcl9jb21w",
          "cmVzc19yZWFkcxBlEh4KGmJlZGlyX2NvbXByZXNzX3JlYWRfa2J5dGVzEGYS",
          "GQoVYmVkaXJfY29tcHJlc3Nfd3JpdGVzEGcSHwobYmVkaXJfY29tcHJlc3Nf",
          "d3JpdGVfa2J5dGVzEGgSJgoiZmVfZGlyX3BvcnRfcG9ydF9kZXJpdmVkX2lv",
          "c19jb3VudBBpEjEKLWZlX2Rpcl9wb3J0X3BvcnRfZGVyaXZlZF90b3RhbF90",
          "aHJ1cHV0X2tieXRlcxBqEh8KG2ZlX2Rpcl9wb3J0X3BvcnRfcmVhZF9jb3Vu",
          "dBBrEiAKHGZlX2Rpcl9wb3J0X3BvcnRfd3JpdGVfY291bnQQbBIoCiRmZV9k",
          "aXJfcG9ydF9wb3J0X3JlYWRfdGhydXB1dF9rYnl0ZXMQbRIpCiVmZV9kaXJf",
          "cG9ydF9wb3J0X3dyaXRlX3RocnVwdXRfa2J5dGVzEG4SGgoWZmVfZGlyX3Bv",
          "cnRfcG9ydF9zcGVlZBBvEiAKHGZlX2Rpcl9wb3J0X25lZ290aWF0ZWRfc3Bl",
          "ZWQQcBIfChtmZWRpcl9hY2N1bVF1ZXVlRGVwdGhSYW5nZTAQcRIfChtmZWRp",
          "cl9hY2N1bVF1ZXVlRGVwdGhSYW5nZTUQchIgChxmZWRpcl9hY2N1bVF1ZXVl",
          "RGVwdGhSYW5nZTEwEHMSIAocZmVkaXJfYWNjdW1RdWV1ZURlcHRoUmFuZ2Uy",
          "MBB0EiAKHGZlZGlyX2FjY3VtUXVldWVEZXB0aFJhbmdlNDAQdRIgChxmZWRp",
          "cl9hY2N1bVF1ZXVlRGVwdGhSYW5nZTgwEHYSIQodZmVkaXJfYWNjdW1RdWV1",
          "ZURlcHRoUmFuZ2UxNjAQdxIhCh1mZWRpcl9hY2N1bVF1ZXVlRGVwdGhSYW5n",
          "ZTMyMBB4EiEKHWZlZGlyX2FjY3VtUXVldWVEZXB0aFJhbmdlNjQwEHkSJQoh",
          "ZmVkaXJfYWNjdW1RdWV1ZURlcHRoUmFuZ2VPdmVyNjQwEHoSHwobZmVkaXJf",
          "cXVldWVEZXB0aENvdW50UmFuZ2UwEHsSHwobZmVkaXJfcXVldWVEZXB0aENv",
          "dW50UmFuZ2U1EHwSIAocZmVkaXJfcXVldWVEZXB0aENvdW50UmFuZ2UxMBB9",
          "EiAKHGZlZGlyX3F1ZXVlRGVwdGhDb3VudFJhbmdlMjAQfhIgChxmZWRpcl9x",
          "dWV1ZURlcHRoQ291bnRSYW5nZTQwEH8SIQocZmVkaXJfcXVldWVEZXB0aENv",
          "dW50UmFuZ2U4MBCAARIiCh1mZWRpcl9xdWV1ZURlcHRoQ291bnRSYW5nZTE2",
          "MBCBARIiCh1mZWRpcl9xdWV1ZURlcHRoQ291bnRSYW5nZTMyMBCCARIiCh1m",
          "ZWRpcl9xdWV1ZURlcHRoQ291bnRSYW5nZTY0MBCDARImCiFmZWRpcl9xdWV1",
          "ZURlcHRoQ291bnRSYW5nZU92ZXI2NDAQhAESIAobZmVkaXJfcmVhZF9yZXNw",
          "X3RpbWVfY291bnQwEIUBEiAKG2ZlZGlyX3JlYWRfcmVzcF90aW1lX2NvdW50",
          "MRCGARIgChtmZWRpcl9yZWFkX3Jlc3BfdGltZV9jb3VudDIQhwESIAobZmVk",
          "aXJfcmVhZF9yZXNwX3RpbWVfY291bnQzEIgBEiAKG2ZlZGlyX3JlYWRfcmVz",
          "cF90aW1lX2NvdW50NBCJARIgChtmZWRpcl9yZWFkX3Jlc3BfdGltZV9jb3Vu",
          "dDUQigESIAobZmVkaXJfcmVhZF9yZXNwX3RpbWVfY291bnQ2EIsBEiAKG2Zl",
          "ZGlyX3JlYWRfcmVzcF90aW1lX2NvdW50NxCMARIhChxmZWRpcl93cml0ZV9y",
          "ZXNwX3RpbWVfY291bnQwEI0BEiEKHGZlZGlyX3dyaXRlX3Jlc3BfdGltZV9j",
          "b3VudDEQjgESIQocZmVkaXJfd3JpdGVfcmVzcF90aW1lX2NvdW50MhCPARIh",
          "ChxmZWRpcl93cml0ZV9yZXNwX3RpbWVfY291bnQzEJABEiEKHGZlZGlyX3dy",
          "aXRlX3Jlc3BfdGltZV9jb3VudDQQkQESIQocZmVkaXJfd3JpdGVfcmVzcF90",
          "aW1lX2NvdW50NRCSARIhChxmZWRpcl93cml0ZV9yZXNwX3RpbWVfY291bnQ2",
          "EJMBEiEKHGZlZGlyX3dyaXRlX3Jlc3BfdGltZV9jb3VudDcQlAESEwoOZmVk",
          "aXJfbnVtSW9SZXEQlQESKAojZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVfZGVw",
          "dGhfcmFuZ2UQlgESHwoaZmVkaXJfcXVldWVEZXB0aENvdW50UmFuZ2UQlwES",
          "HwoaZmVkaXJfcmVhZF9yZXNwX3RpbWVfY291bnQQmAESIAobZmVkaXJfd3Jp",
          "dGVfcmVzcF90aW1lX2NvdW50EJkBEiMKHmZlZGlyX2Rlcml2ZWRfYXZnX3Jl",
          "YWRfdGltZV9tcxCaARIkCh9mZWRpcl9kZXJpdmVkX2F2Z193cml0ZV90aW1l",
          "X21zEJsBEhkKFGZlZGlyX2RpclV0aWxpemF0aW9uEJwBEh0KGGZlZGlyX3Rv",
          "dGFsX3N5c2NhbGxfdGltZRCdARIpCiRmZWRpcl9kZXJpdmVkX2F2Z19xdWV1",
          "ZV9kZXB0aF9yYW5nZTAQngESKQokZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVf",
          "ZGVwdGhfcmFuZ2U1EJ8BEioKJWZlZGlyX2Rlcml2ZWRfYXZnX3F1ZXVlX2Rl",
          "cHRoX3JhbmdlMTAQoAESKgolZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVfZGVw",
          "dGhfcmFuZ2UyMBChARIqCiVmZWRpcl9kZXJpdmVkX2F2Z19xdWV1ZV9kZXB0",
          "aF9yYW5nZTQwEKIBEioKJWZlZGlyX2Rlcml2ZWRfYXZnX3F1ZXVlX2RlcHRo",
          "X3JhbmdlODAQowESKwomZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVfZGVwdGhf",
          "cmFuZ2UxNjAQpAESKwomZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVfZGVwdGhf",
          "cmFuZ2UzMjAQpQESKwomZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVfZGVwdGhf",
          "cmFuZ2U2NDAQpgESLwoqZmVkaXJfZGVyaXZlZF9hdmdfcXVldWVfZGVwdGhf",
          "cmFuZ2VPdmVyNjQwEKcBEhkKFGFycmF5X2NhY2hlVHJhY2tTaXplEKgBEhgK",
          "E2FycmF5X251bUtieXRlc1JlYWQQqQESGwoWYXJyYXlfbnVtS2J5dGVzV3Jp",
          "dHRlbhCqARIgChthcnJheV9udW1Xcml0ZVBlbmRpbmdUcmFja3MQqwESEgoN",
          "YXJyYXlfbnVtSGl0cxCsARIWChFhcnJheV9udW1SZWFkSGl0cxCtARIVChBh",
          "cnJheV9udW1SZWFkUmVxEK4BEhYKEWFycmF5X251bVdyaXRlUmVxEK8BEhgK",
          "E2FycmF5X3N5c01heFdwTGltaXQQsAESEwoOYXJyYXlfbnVtSW9SZXEQsQES",
          "GwoWZGlza190b3RhbFNjc2lDb21tYW5kcxCyARIWChFkaXNrX3JlYWRDb21t",
          "YW5kcxCzARIXChJkaXNrX3dyaXRlQ29tbWFuZHMQtAESHQoYZGlza19udW1T",
          "a2lwTWFza0NvbW1hbmRzELUBEh0KGGRpc2tfbnVtWG9yV3JpdGVDb21tYW5k",
          "cxC2ARIxCixkaXNrX2Rlcml2ZWRfeG9yX3dyaXRlX3JlYWRfY29tbWFuZHNf",
          "cGVyX3NlYxC3ARIcChdkaXNrX251bVhvclJlYWRDb21tYW5kcxC4ARIaChVk",
          "aXNrX251bUtieXRlc1dyaXR0ZW4QuQESJgohZGlza19kZXJpdmVkX2F2Z19r",
          "Ynl0ZXNfcGVyX3dyaXRlELoBEhcKEmRpc2tfbnVtS2J5dGVzUmVhZBC7ARIl",
          "CiBkaXNrX2Rlcml2ZWRfYXZnX2tieXRlc19wZXJfcmVhZBC8ARIiCh1kaXNr",
          "X2Rlcml2ZWRfYXZnX3JlYWRfdGltZV9tcxC9ARIjCh5kaXNrX2Rlcml2ZWRf",
          "YXZnX3dyaXRlX3RpbWVfbXMQvgESFwoSZGlza190b3RhbFJlYWRUaW1lEL8B",
          "EhgKE2Rpc2tfdG90YWxXcml0ZVRpbWUQwAESLAonZGV2X2Zyb250X2VuZF9k",
          "ZXJpdmVkX3RvdGFsX2lvc19wZXJfc2VjEMEBEi4KKWRldl9mcm9udF9lbmRf",
          "ZGVyaXZlZF90b3RhbF9yZWFkc19wZXJfc2VjEMIBEiQKH2Rldl9mcm9udF9l",
          "bmRfbnVtX3NlcV9yZWFkX3JlcXMQwwESJQogZGV2X2Zyb250X2VuZF9udW1f",
          "c2VxX3dyaXRlX3JlcXMQxAESLgopZGV2X2Zyb250X2VuZF9kZXJpdmVkX2ti",
          "eXRlc19yZWFkX3Blcl9zZWMQxQESMQosZGV2X2Zyb250X2VuZF9kZXJpdmVk",
          "X2tieXRlc193cml0dGVuX3Blcl9zZWMQxgESMgotZGV2X2Zyb250X2VuZF9k",
          "ZXJpdmVkX2F2Z19yZWFkX3NpemVfaW5fa2J5dGVzEMcBEjMKLmRldl9mcm9u",
          "dF9lbmRfZGVyaXZlZF9hdmdfd3JpdGVfc2l6ZV9pbl9rYnl0ZXMQyAESIAob",
          "ZGV2X2Zyb250X2VuZF9udW1fd3BfdHJhY2tzEMkBEiYKIWRldl9mcm9udF9l",
          "bmRfZGV2aWNlX21heF93cF9saW1pdBDKARIwCitkZXZfZnJvbnRfZW5kX2Rl",
          "cml2ZWRfc2FtcGxlZF9hdmdfcmVhZF90aW1lEMsBEjEKLGRldl9mcm9udF9l",
          "bmRfZGVyaXZlZF9zYW1wbGVkX2F2Z193cml0ZV90aW1lEMwBEhwKF2Rldl9m",
          "cm9udF9lbmRfY3JtX3JlYWRzEM0BEiMKHmRldl9mcm9udF9lbmRfY3JtX3Jl",
          "YWRzX2tieXRlcxDOARInCiJkZXZfZnJvbnRfZW5kX251bV9yYW5kb21fcmVh",
          "ZF9yZXFzEM8BEigKI2Rldl9mcm9udF9lbmRfbnVtX3JhbmRvbV93cml0ZV9y",
          "ZXFzENABEicKImRldl9mcm9udF9lbmRfbnVtX3JhbmRvbV9yZWFkX2hpdHMQ",
          "0QESKAojZGV2X2Zyb250X2VuZF9udW1fcmFuZG9tX3dyaXRlX2hpdHMQ0gES",
          "NQowZGV2X2Zyb250X2VuZF9kZXJpdmVkX3RvdGFsX3dyaXRlX21pc3Nlc19w",
          "ZXJfc2VjENMBEh4KGWRldl9mcm9udF9lbmRfa2J5dGVzX3JlYWQQ1AESIQoc",
          "ZGV2X2Zyb250X2VuZF9rYnl0ZXNfd3JpdHRlbhDVARIkCh9kZXZfZnJvbnRf",
          "ZW5kX2RldmljZV9ibG9ja19zaXplENYBEiIKHWRldl9mcm9udF9lbmRfdG90",
          "YWxfcmVhZF90aW1lENcBEiMKHmRldl9mcm9udF9lbmRfdG90YWxfd3JpdGVf",
          "dGltZRDYARIfChpkZXZfYmFja19lbmRfbnVtX3dwX3RyYWNrcxDZARIgChtk",
          "ZXZfYmFja19lbmRfbnVtX3dyaXRlX3JlcXMQ2gESHwoaZGV2X2JhY2tfZW5k",
          "X251bV9wZl90cmFja3MQ2wESHwoaZGV2X2JhY2tfZW5kX251bV9yZWFkX3Jl",
          "cXMQ3AESMAorZGV2X2JhY2tfZW5kX2Rlcml2ZWRfZGFfa2J5dGVzX3JlYWRf",
          "cGVyX3NlYxDdARIzCi5kZXZfYmFja19lbmRfZGVyaXZlZF9kYV9rYnl0ZXNf",
          "d3JpdHRlbl9wZXJfc2VjEN4BEiQKH2Rldl9iYWNrX2VuZF9udW1fYmxvY2tz",
          "X3dyaXR0ZW4Q3wESIQocZGV2X2JhY2tfZW5kX251bV9ibG9ja3NfcmVhZBDg",
          "ARIjCh5kZXZfYmFja19lbmRfZGV2aWNlX2Jsb2NrX3NpemUQ4QESGgoVcmRm",
          "ZGV2aWNlX3RvdGFsX3JlYWRzEOIBEhsKFnJkZmRldmljZV90b3RhbF93cml0",
          "ZXMQ4wESHAoXcmRmZGV2aWNlX2J5dGVzX3JlYWRfa2IQ5AESHwoacmRmZGV2",
          "aWNlX2J5dGVzX3dyaXR0ZW5fa2IQ5QESJgohZGV2aWNlcG9vbF9hbGxvY2F0",
          "ZWRUcmFja3NQZXJQb29sEOYBEhwKF2RldmljZXBvb2xfZGVzdGFnZVdyaXRl",
          "EOcBEh4KGWRldmljZXBvb2xfZGVzdGFnZVdyaXRlS2IQ6AESGgoVZGV2aWNl",
          "cG9vbF9wcmVmZXRjaEtiEOkBEhgKE2RldmljZXBvb2xfcHJlZmV0Y2gQ6gES",
          "IAobZGV2aWNlcG9vbF9yYW5kb21SZWFkTWlzc0tiEOsBEh4KGWRldmljZXBv",
          "b2xfcmFuZG9tUmVhZE1pc3MQ7AESJwoiZGV2aWNlcG9vbF9jb21wcmVzc2Vk",
          "VHJhY2tzUGVyUG9vbBDtARIlCiB0aGlucG9vbF90b3RhbF9lbmFibGVkX3Ry",
          "YWNrc182NBDuARIhChx0aGlucG9vbF9mYXN0X2VncmVzc19jb3VudGVyEO8B",
          "EiIKHXRoaW5wb29sX3RvdGFsX2ZyZWVfdHJhY2tzXzY0EPABEiIKHXRoaW5w",
          "b29sX3RvdGFsX3VzZWRfdHJhY2tzXzY0EPEBYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(new[] {typeof(global::KPICategory), typeof(global::KPIMetric), }, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::WorkloadTimeStampsProto), global::WorkloadTimeStampsProto.Parser, new[]{ "Timestamps", "SymmetrixId", "Data" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::KPIComponent), global::KPIComponent.Parser, new[]{ "Category", "Instances", "Metrics" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
          new pbr::GeneratedCodeInfo(typeof(global::KPIInstance), global::KPIInstance.Parser, new[]{ "Values", "Name", "Category" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::KPIMetricDoubleArrayPair), global::KPIMetricDoubleArrayPair.Parser, new[]{ "Key", "Value" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::KPICategoryKPIComponentPair), global::KPICategoryKPIComponentPair.Parser, new[]{ "Key", "Value" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DoubleArray), global::DoubleArray.Parser, new[]{ "Array" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum KPICategory {
  ARRAY = 0,
  DEVICE = 1,
  FE_DIR = 2,
  BE_DIR = 3,
  RDF_DIR = 4,
  DISK = 5,
  FE_PORT = 6,
  CP = 7,
  RDFA_GRP = 8,
  RDF_LINK = 9,
  /// <summary>
  /// KGKG: DO NOT REMOVE 
  /// </summary>
  EVENT = 10,
  /// <summary>
  /// TAIL;
  /// </summary>
  DEV_POOL = 11,
  /// <summary>
  ///  Thin Pool Stats 
  /// </summary>
  THIN_POOL = 12,
  RDF_DEV = 13,
  /// <summary>
  ///  Device Host Cache Stats 
  /// </summary>
  DEV_CACH = 14,
  EXT_DISK = 15,
  /// <summary>
  /// CONTAINER;
  /// </summary>
  BOARD = 16,
  DEV_FRONT_END = 17,
  DEV_BACK_END = 18,
  DEVICE_LOCALITY = 19,
  RDF_SYSTEM = 20,
  RDF_NW_COMPRESSION = 21,
  SPDLMT_GROUP = 22,
  TCP_CONNECTION = 23,
  DIR_NETWORK = 24,
  NW_INTERFACE = 25,
  ORS_PORT = 26,
  ORS_DEVICE = 27,
  FE_DIR_PORT = 28,
  RDF_DIR_PORT = 29,
  BE_DIR_PORT = 30,
  EDS_DIR = 31,
  CONTAINER_PORT = 32,
  GOS = 33,
  IM_DIR = 34,
  IM_SLIC = 35,
  CORE = 36,
  CORE_EDS = 37,
  CORE_IM = 38,
  CORE_FE = 39,
  CORE_BE = 40,
  CORE_RDF = 41,
  CORE_FICON = 42,
  ISCSI_CLIENT = 43,
  ISCSI_TARGET = 44,
  DISK_GROUP = 45,
  DEV_POOL_ALLOCATIONS = 46,
  INITIATOR = 47,
  HEADER = 48,
}

public enum KPIMetric {
  im_dir_memory_page_fall_through_time_total = 0,
  im_dir_memory_page_usage_total = 1,
  eds_dir_random_read_misses = 2,
  eds_dir_random_read_misses_kbytes = 3,
  eds_dir_random_write_misses = 4,
  eds_dir_random_write_misses_kbytes = 5,
  rdfdir_numKbytesRecvd = 6,
  rdfdir_numKbytesSent = 7,
  rdfdir_total_copy_io_count = 8,
  rdfdir_total_copy_io_kbytes = 9,
  rdfdir_total_srdfs_write_count = 10,
  core_time_stamp = 11,
  core_symmk_idle_time = 12,
  core_im_time_stamp = 13,
  core_im_page_in_time = 14,
  core_im_page_out_time = 15,
  core_im_environmental_time = 16,
  core_im_other_time = 17,
  core_im_symmk_total_time = 18,
  core_eds_time_stamp = 19,
  core_eds_emulation_time = 20,
  core_eds_io_machine_time = 21,
  core_eds_lp_io_machine_time = 22,
  core_eds_housekeeping_time = 23,
  core_eds_lrep_control_time = 24,
  core_eds_vp_time = 25,
  core_eds_copy_scanner_time = 26,
  core_eds_pyramid_time = 27,
  core_eds_scan_time = 28,
  core_eds_snow_spillover_time = 29,
  core_eds_remote_replication_time = 30,
  core_eds_syscalls_time = 31,
  core_eds_watchdog_time = 32,
  core_eds_allocation_split_time = 33,
  core_eds_fsm_time = 34,
  core_eds_symmk_total_time = 35,
  core_fe_time_stamp = 36,
  core_fe_total_reads_time = 37,
  core_fe_total_writes_time = 38,
  core_fe_syscalls_time = 39,
  core_fe_managment_time = 40,
  core_fe_link_port_time = 41,
  core_fe_xrc_replication_time = 42,
  core_fe_zhpf_reads_time = 43,
  core_fe_zhpf_writes_time = 44,
  core_fe_odx_vaai_xcopy_time = 45,
  core_fe_odx_vaai_write_same_time = 46,
  core_fe_odx_vaai_lock_time = 47,
  core_fe_cdi_time = 48,
  core_fe_lp_task_time = 49,
  core_fe_symmk_total_time = 50,
  core_be_time_stamp = 51,
  core_be_total_read_misses_time = 52,
  core_be_total_writes_time = 53,
  core_be_total_prefetch_time = 54,
  core_be_total_copy_reads_time = 55,
  core_be_total_copy_writes_time = 56,
  core_be_syscalls_time = 57,
  core_be_managment_time = 58,
  core_be_rebuild_time = 59,
  core_be_ivtoc_time = 60,
  core_be_software_compression_time = 61,
  core_be_other_time = 62,
  core_be_cdi_time = 63,
  core_be_lp_task_time = 64,
  core_be_symmk_total_time = 65,
  core_rdf_time_stamp = 66,
  core_rdf_total_reads_time = 67,
  core_rdf_total_writes_time = 68,
  core_rdf_total_copy_reads_time = 69,
  core_rdf_total_copy_writes_time = 70,
  core_rdf_syscalls_time = 71,
  core_rdf_other_time = 72,
  core_rdf_lp_task_time = 73,
  core_rdf_link_management_time = 74,
  core_rdf_software_compression_time = 75,
  core_rdf_symmk_total_time = 76,
  core_ficon_time_stamp = 77,
  core_ficon_random_read_hits_time = 78,
  core_ficon_random_write_hits_time = 79,
  core_ficon_random_write_misses_time = 80,
  core_ficon_random_read_misses_time = 81,
  core_ficon_total_sequential_reads_time = 82,
  core_ficon_total_sequential_writes_time = 83,
  core_ficon_syscalls_time = 84,
  core_ficon_managment_time = 85,
  core_ficon_link_port_time = 86,
  core_ficon_xrc_replication_time = 87,
  core_ficon_zhpf_reads_time = 88,
  core_ficon_zhpf_writes_time = 89,
  core_ficon_cdi_time = 90,
  core_ficon_lp_task_time = 91,
  core_ficon_symmk_total_time = 92,
  gos_memory_size = 93,
  gos_num_cpus = 94,
  rdfagrp_sysWritePendingCount = 95,
  rdfagrp_dseTracksUsed = 96,
  rdfagrp_hostWriteNumIoReq = 97,
  rdfagrp_hostWriteNumMbytes = 98,
  bedir_numIoReq = 99,
  bedir_dirUtilization = 100,
  bedir_compress_reads = 101,
  bedir_compress_read_kbytes = 102,
  bedir_compress_writes = 103,
  bedir_compress_write_kbytes = 104,
  fe_dir_port_port_derived_ios_count = 105,
  fe_dir_port_port_derived_total_thruput_kbytes = 106,
  fe_dir_port_port_read_count = 107,
  fe_dir_port_port_write_count = 108,
  fe_dir_port_port_read_thruput_kbytes = 109,
  fe_dir_port_port_write_thruput_kbytes = 110,
  fe_dir_port_port_speed = 111,
  fe_dir_port_negotiated_speed = 112,
  fedir_accumQueueDepthRange0 = 113,
  fedir_accumQueueDepthRange5 = 114,
  fedir_accumQueueDepthRange10 = 115,
  fedir_accumQueueDepthRange20 = 116,
  fedir_accumQueueDepthRange40 = 117,
  fedir_accumQueueDepthRange80 = 118,
  fedir_accumQueueDepthRange160 = 119,
  fedir_accumQueueDepthRange320 = 120,
  fedir_accumQueueDepthRange640 = 121,
  fedir_accumQueueDepthRangeOver640 = 122,
  fedir_queueDepthCountRange0 = 123,
  fedir_queueDepthCountRange5 = 124,
  fedir_queueDepthCountRange10 = 125,
  fedir_queueDepthCountRange20 = 126,
  fedir_queueDepthCountRange40 = 127,
  fedir_queueDepthCountRange80 = 128,
  fedir_queueDepthCountRange160 = 129,
  fedir_queueDepthCountRange320 = 130,
  fedir_queueDepthCountRange640 = 131,
  fedir_queueDepthCountRangeOver640 = 132,
  fedir_read_resp_time_count0 = 133,
  fedir_read_resp_time_count1 = 134,
  fedir_read_resp_time_count2 = 135,
  fedir_read_resp_time_count3 = 136,
  fedir_read_resp_time_count4 = 137,
  fedir_read_resp_time_count5 = 138,
  fedir_read_resp_time_count6 = 139,
  fedir_read_resp_time_count7 = 140,
  fedir_write_resp_time_count0 = 141,
  fedir_write_resp_time_count1 = 142,
  fedir_write_resp_time_count2 = 143,
  fedir_write_resp_time_count3 = 144,
  fedir_write_resp_time_count4 = 145,
  fedir_write_resp_time_count5 = 146,
  fedir_write_resp_time_count6 = 147,
  fedir_write_resp_time_count7 = 148,
  fedir_numIoReq = 149,
  fedir_derived_avg_queue_depth_range = 150,
  fedir_queueDepthCountRange = 151,
  fedir_read_resp_time_count = 152,
  fedir_write_resp_time_count = 153,
  fedir_derived_avg_read_time_ms = 154,
  fedir_derived_avg_write_time_ms = 155,
  fedir_dirUtilization = 156,
  fedir_total_syscall_time = 157,
  fedir_derived_avg_queue_depth_range0 = 158,
  fedir_derived_avg_queue_depth_range5 = 159,
  fedir_derived_avg_queue_depth_range10 = 160,
  fedir_derived_avg_queue_depth_range20 = 161,
  fedir_derived_avg_queue_depth_range40 = 162,
  fedir_derived_avg_queue_depth_range80 = 163,
  fedir_derived_avg_queue_depth_range160 = 164,
  fedir_derived_avg_queue_depth_range320 = 165,
  fedir_derived_avg_queue_depth_range640 = 166,
  fedir_derived_avg_queue_depth_rangeOver640 = 167,
  array_cacheTrackSize = 168,
  array_numKbytesRead = 169,
  array_numKbytesWritten = 170,
  array_numWritePendingTracks = 171,
  array_numHits = 172,
  array_numReadHits = 173,
  array_numReadReq = 174,
  array_numWriteReq = 175,
  array_sysMaxWpLimit = 176,
  array_numIoReq = 177,
  disk_totalScsiCommands = 178,
  disk_readCommands = 179,
  disk_writeCommands = 180,
  disk_numSkipMaskCommands = 181,
  disk_numXorWriteCommands = 182,
  disk_derived_xor_write_read_commands_per_sec = 183,
  disk_numXorReadCommands = 184,
  disk_numKbytesWritten = 185,
  disk_derived_avg_kbytes_per_write = 186,
  disk_numKbytesRead = 187,
  disk_derived_avg_kbytes_per_read = 188,
  disk_derived_avg_read_time_ms = 189,
  disk_derived_avg_write_time_ms = 190,
  disk_totalReadTime = 191,
  disk_totalWriteTime = 192,
  dev_front_end_derived_total_ios_per_sec = 193,
  dev_front_end_derived_total_reads_per_sec = 194,
  dev_front_end_num_seq_read_reqs = 195,
  dev_front_end_num_seq_write_reqs = 196,
  dev_front_end_derived_kbytes_read_per_sec = 197,
  dev_front_end_derived_kbytes_written_per_sec = 198,
  dev_front_end_derived_avg_read_size_in_kbytes = 199,
  dev_front_end_derived_avg_write_size_in_kbytes = 200,
  dev_front_end_num_wp_tracks = 201,
  dev_front_end_device_max_wp_limit = 202,
  dev_front_end_derived_sampled_avg_read_time = 203,
  dev_front_end_derived_sampled_avg_write_time = 204,
  dev_front_end_crm_reads = 205,
  dev_front_end_crm_reads_kbytes = 206,
  dev_front_end_num_random_read_reqs = 207,
  dev_front_end_num_random_write_reqs = 208,
  dev_front_end_num_random_read_hits = 209,
  dev_front_end_num_random_write_hits = 210,
  dev_front_end_derived_total_write_misses_per_sec = 211,
  dev_front_end_kbytes_read = 212,
  dev_front_end_kbytes_written = 213,
  dev_front_end_device_block_size = 214,
  dev_front_end_total_read_time = 215,
  dev_front_end_total_write_time = 216,
  dev_back_end_num_wp_tracks = 217,
  dev_back_end_num_write_reqs = 218,
  dev_back_end_num_pf_tracks = 219,
  dev_back_end_num_read_reqs = 220,
  dev_back_end_derived_da_kbytes_read_per_sec = 221,
  dev_back_end_derived_da_kbytes_written_per_sec = 222,
  dev_back_end_num_blocks_written = 223,
  dev_back_end_num_blocks_read = 224,
  dev_back_end_device_block_size = 225,
  rdfdevice_total_reads = 226,
  rdfdevice_total_writes = 227,
  rdfdevice_bytes_read_kb = 228,
  rdfdevice_bytes_written_kb = 229,
  devicepool_allocatedTracksPerPool = 230,
  devicepool_destageWrite = 231,
  devicepool_destageWriteKb = 232,
  devicepool_prefetchKb = 233,
  devicepool_prefetch = 234,
  devicepool_randomReadMissKb = 235,
  devicepool_randomReadMiss = 236,
  devicepool_compressedTracksPerPool = 237,
  thinpool_total_enabled_tracks_64 = 238,
  thinpool_fast_egress_counter = 239,
  thinpool_total_free_tracks_64 = 240,
  thinpool_total_used_tracks_64 = 241,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class WorkloadTimeStampsProto : pb::IMessage<WorkloadTimeStampsProto> {
  private static readonly pb::MessageParser<WorkloadTimeStampsProto> _parser = new pb::MessageParser<WorkloadTimeStampsProto>(() => new WorkloadTimeStampsProto());
  public static pb::MessageParser<WorkloadTimeStampsProto> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::WorkloadStampsProtoReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public WorkloadTimeStampsProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  public WorkloadTimeStampsProto(WorkloadTimeStampsProto other) : this() {
    Timestamps_ = other.Timestamps_.Clone();
    SymmetrixId_ = other.SymmetrixId_;
    Data_ = other.Data_.Clone();
  }

  public WorkloadTimeStampsProto Clone() {
    return new WorkloadTimeStampsProto(this);
  }

  /// <summary>Field number for the "_timestamps" field.</summary>
  public const int TimestampsFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_Timestamps_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> Timestamps_ = new pbc::RepeatedField<long>();
  public pbc::RepeatedField<long> Timestamps {
    get { return Timestamps_; }
  }

  /// <summary>Field number for the "_symmetrixId" field.</summary>
  public const int SymmetrixIdFieldNumber = 2;
  private string SymmetrixId_ = "";
  public string SymmetrixId {
    get { return SymmetrixId_; }
    set {
      SymmetrixId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_data" field.</summary>
  public const int DataFieldNumber = 3;
  private static readonly pb::FieldCodec<global::KPICategoryKPIComponentPair> _repeated_Data_codec
      = pb::FieldCodec.ForMessage(26, global::KPICategoryKPIComponentPair.Parser);
  private readonly pbc::RepeatedField<global::KPICategoryKPIComponentPair> Data_ = new pbc::RepeatedField<global::KPICategoryKPIComponentPair>();
  /// <summary>
  /// _dateTimes is not necessary, we can always get it from _timestamps.
  /// </summary>
  public pbc::RepeatedField<global::KPICategoryKPIComponentPair> Data {
    get { return Data_; }
  }

  public override bool Equals(object other) {
    return Equals(other as WorkloadTimeStampsProto);
  }

  public bool Equals(WorkloadTimeStampsProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!Timestamps_.Equals(other.Timestamps_)) return false;
    if (SymmetrixId != other.SymmetrixId) return false;
    if(!Data_.Equals(other.Data_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Timestamps_.GetHashCode();
    if (SymmetrixId.Length != 0) hash ^= SymmetrixId.GetHashCode();
    hash ^= Data_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    Timestamps_.WriteTo(output, _repeated_Timestamps_codec);
    if (SymmetrixId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SymmetrixId);
    }
    Data_.WriteTo(output, _repeated_Data_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += Timestamps_.CalculateSize(_repeated_Timestamps_codec);
    if (SymmetrixId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SymmetrixId);
    }
    size += Data_.CalculateSize(_repeated_Data_codec);
    return size;
  }

  public void MergeFrom(WorkloadTimeStampsProto other) {
    if (other == null) {
      return;
    }
    Timestamps_.Add(other.Timestamps_);
    if (other.SymmetrixId.Length != 0) {
      SymmetrixId = other.SymmetrixId;
    }
    Data_.Add(other.Data_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          Timestamps_.AddEntriesFrom(input, _repeated_Timestamps_codec);
          break;
        }
        case 18: {
          SymmetrixId = input.ReadString();
          break;
        }
        case 26: {
          Data_.AddEntriesFrom(input, _repeated_Data_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class KPIComponent : pb::IMessage<KPIComponent> {
  private static readonly pb::MessageParser<KPIComponent> _parser = new pb::MessageParser<KPIComponent>(() => new KPIComponent());
  public static pb::MessageParser<KPIComponent> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::WorkloadStampsProtoReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public KPIComponent() {
    OnConstruction();
  }

  partial void OnConstruction();

  public KPIComponent(KPIComponent other) : this() {
    category_ = other.category_;
    instances_ = other.instances_.Clone();
    metrics_ = other.metrics_.Clone();
  }

  public KPIComponent Clone() {
    return new KPIComponent(this);
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 1;
  private global::KPICategory category_ = global::KPICategory.ARRAY;
  public global::KPICategory Category {
    get { return category_; }
    set {
      category_ = value;
    }
  }

  /// <summary>Field number for the "instances" field.</summary>
  public const int InstancesFieldNumber = 2;
  private static readonly pbc::MapField<string, global::KPIInstance>.Codec _map_instances_codec
      = new pbc::MapField<string, global::KPIInstance>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::KPIInstance.Parser), 18);
  private readonly pbc::MapField<string, global::KPIInstance> instances_ = new pbc::MapField<string, global::KPIInstance>();
  public pbc::MapField<string, global::KPIInstance> Instances {
    get { return instances_; }
  }

  /// <summary>Field number for the "metrics" field.</summary>
  public const int MetricsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::KPIMetric> _repeated_metrics_codec
      = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::KPIMetric) x);
  private readonly pbc::RepeatedField<global::KPIMetric> metrics_ = new pbc::RepeatedField<global::KPIMetric>();
  public pbc::RepeatedField<global::KPIMetric> Metrics {
    get { return metrics_; }
  }

  public override bool Equals(object other) {
    return Equals(other as KPIComponent);
  }

  public bool Equals(KPIComponent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Category != other.Category) return false;
    if (!Instances.Equals(other.Instances)) return false;
    if(!metrics_.Equals(other.metrics_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Category != global::KPICategory.ARRAY) hash ^= Category.GetHashCode();
    hash ^= Instances.GetHashCode();
    hash ^= metrics_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Category != global::KPICategory.ARRAY) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Category);
    }
    instances_.WriteTo(output, _map_instances_codec);
    metrics_.WriteTo(output, _repeated_metrics_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Category != global::KPICategory.ARRAY) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
    }
    size += instances_.CalculateSize(_map_instances_codec);
    size += metrics_.CalculateSize(_repeated_metrics_codec);
    return size;
  }

  public void MergeFrom(KPIComponent other) {
    if (other == null) {
      return;
    }
    if (other.Category != global::KPICategory.ARRAY) {
      Category = other.Category;
    }
    instances_.Add(other.instances_);
    metrics_.Add(other.metrics_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          category_ = (global::KPICategory) input.ReadEnum();
          break;
        }
        case 18: {
          instances_.AddEntriesFrom(input, _map_instances_codec);
          break;
        }
        case 26:
        case 24: {
          metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class KPIInstance : pb::IMessage<KPIInstance> {
  private static readonly pb::MessageParser<KPIInstance> _parser = new pb::MessageParser<KPIInstance>(() => new KPIInstance());
  public static pb::MessageParser<KPIInstance> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::WorkloadStampsProtoReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public KPIInstance() {
    OnConstruction();
  }

  partial void OnConstruction();

  public KPIInstance(KPIInstance other) : this() {
    values_ = other.values_.Clone();
    name_ = other.name_;
    category_ = other.category_;
  }

  public KPIInstance Clone() {
    return new KPIInstance(this);
  }

  /// <summary>Field number for the "values" field.</summary>
  public const int ValuesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::KPIMetricDoubleArrayPair> _repeated_values_codec
      = pb::FieldCodec.ForMessage(10, global::KPIMetricDoubleArrayPair.Parser);
  private readonly pbc::RepeatedField<global::KPIMetricDoubleArrayPair> values_ = new pbc::RepeatedField<global::KPIMetricDoubleArrayPair>();
  public pbc::RepeatedField<global::KPIMetricDoubleArrayPair> Values {
    get { return values_; }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  public string Name {
    get { return name_; }
    set {
      name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 3;
  private global::KPICategory category_ = global::KPICategory.ARRAY;
  public global::KPICategory Category {
    get { return category_; }
    set {
      category_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as KPIInstance);
  }

  public bool Equals(KPIInstance other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!values_.Equals(other.values_)) return false;
    if (Name != other.Name) return false;
    if (Category != other.Category) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= values_.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Category != global::KPICategory.ARRAY) hash ^= Category.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    values_.WriteTo(output, _repeated_values_codec);
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Category != global::KPICategory.ARRAY) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Category);
    }
  }

  public int CalculateSize() {
    int size = 0;
    size += values_.CalculateSize(_repeated_values_codec);
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Category != global::KPICategory.ARRAY) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
    }
    return size;
  }

  public void MergeFrom(KPIInstance other) {
    if (other == null) {
      return;
    }
    values_.Add(other.values_);
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Category != global::KPICategory.ARRAY) {
      Category = other.Category;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          values_.AddEntriesFrom(input, _repeated_values_codec);
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          category_ = (global::KPICategory) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class KPIMetricDoubleArrayPair : pb::IMessage<KPIMetricDoubleArrayPair> {
  private static readonly pb::MessageParser<KPIMetricDoubleArrayPair> _parser = new pb::MessageParser<KPIMetricDoubleArrayPair>(() => new KPIMetricDoubleArrayPair());
  public static pb::MessageParser<KPIMetricDoubleArrayPair> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::WorkloadStampsProtoReflection.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public KPIMetricDoubleArrayPair() {
    OnConstruction();
  }

  partial void OnConstruction();

  public KPIMetricDoubleArrayPair(KPIMetricDoubleArrayPair other) : this() {
    key_ = other.key_;
    Value = other.value_ != null ? other.Value.Clone() : null;
  }

  public KPIMetricDoubleArrayPair Clone() {
    return new KPIMetricDoubleArrayPair(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private global::KPIMetric key_ = global::KPIMetric.im_dir_memory_page_fall_through_time_total;
  public global::KPIMetric Key {
    get { return key_; }
    set {
      key_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::DoubleArray value_;
  public global::DoubleArray Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as KPIMetricDoubleArrayPair);
  }

  public bool Equals(KPIMetricDoubleArrayPair other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Key != global::KPIMetric.im_dir_memory_page_fall_through_time_total) hash ^= Key.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Key != global::KPIMetric.im_dir_memory_page_fall_through_time_total) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Key);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Key != global::KPIMetric.im_dir_memory_page_fall_through_time_total) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    return size;
  }

  public void MergeFrom(KPIMetricDoubleArrayPair other) {
    if (other == null) {
      return;
    }
    if (other.Key != global::KPIMetric.im_dir_memory_page_fall_through_time_total) {
      Key = other.Key;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        value_ = new global::DoubleArray();
      }
      Value.MergeFrom(other.Value);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          key_ = (global::KPIMetric) input.ReadEnum();
          break;
        }
        case 18: {
          if (value_ == null) {
            value_ = new global::DoubleArray();
          }
          input.ReadMessage(value_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class KPICategoryKPIComponentPair : pb::IMessage<KPICategoryKPIComponentPair> {
  private static readonly pb::MessageParser<KPICategoryKPIComponentPair> _parser = new pb::MessageParser<KPICategoryKPIComponentPair>(() => new KPICategoryKPIComponentPair());
  public static pb::MessageParser<KPICategoryKPIComponentPair> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::WorkloadStampsProtoReflection.Descriptor.MessageTypes[4]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public KPICategoryKPIComponentPair() {
    OnConstruction();
  }

  partial void OnConstruction();

  public KPICategoryKPIComponentPair(KPICategoryKPIComponentPair other) : this() {
    key_ = other.key_;
    Value = other.value_ != null ? other.Value.Clone() : null;
  }

  public KPICategoryKPIComponentPair Clone() {
    return new KPICategoryKPIComponentPair(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private global::KPICategory key_ = global::KPICategory.ARRAY;
  public global::KPICategory Key {
    get { return key_; }
    set {
      key_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::KPIComponent value_;
  public global::KPIComponent Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as KPICategoryKPIComponentPair);
  }

  public bool Equals(KPICategoryKPIComponentPair other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Key != global::KPICategory.ARRAY) hash ^= Key.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Key != global::KPICategory.ARRAY) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Key);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Key != global::KPICategory.ARRAY) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    return size;
  }

  public void MergeFrom(KPICategoryKPIComponentPair other) {
    if (other == null) {
      return;
    }
    if (other.Key != global::KPICategory.ARRAY) {
      Key = other.Key;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        value_ = new global::KPIComponent();
      }
      Value.MergeFrom(other.Value);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          key_ = (global::KPICategory) input.ReadEnum();
          break;
        }
        case 18: {
          if (value_ == null) {
            value_ = new global::KPIComponent();
          }
          input.ReadMessage(value_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DoubleArray : pb::IMessage<DoubleArray> {
  private static readonly pb::MessageParser<DoubleArray> _parser = new pb::MessageParser<DoubleArray>(() => new DoubleArray());
  public static pb::MessageParser<DoubleArray> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::WorkloadStampsProtoReflection.Descriptor.MessageTypes[5]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DoubleArray() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DoubleArray(DoubleArray other) : this() {
    array_ = other.array_.Clone();
  }

  public DoubleArray Clone() {
    return new DoubleArray(this);
  }

  /// <summary>Field number for the "array" field.</summary>
  public const int ArrayFieldNumber = 1;
  private static readonly pb::FieldCodec<double> _repeated_array_codec
      = pb::FieldCodec.ForDouble(10);
  private readonly pbc::RepeatedField<double> array_ = new pbc::RepeatedField<double>();
  public pbc::RepeatedField<double> Array {
    get { return array_; }
  }

  public override bool Equals(object other) {
    return Equals(other as DoubleArray);
  }

  public bool Equals(DoubleArray other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!array_.Equals(other.array_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= array_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    array_.WriteTo(output, _repeated_array_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += array_.CalculateSize(_repeated_array_codec);
    return size;
  }

  public void MergeFrom(DoubleArray other) {
    if (other == null) {
      return;
    }
    array_.Add(other.array_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 9: {
          array_.AddEntriesFrom(input, _repeated_array_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
