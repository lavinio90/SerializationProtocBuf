// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VMAX3ConfigurationProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from VMAX3ConfigurationProto.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class VMAX3ConfigurationProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for VMAX3ConfigurationProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static VMAX3ConfigurationProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch1WTUFYM0NvbmZpZ3VyYXRpb25Qcm90by5wcm90byLCDAoXVk1BWDNDb25m",
          "aWd1cmF0aW9uUHJvdG8SDgoGX21vZGVsGAEgASgJEgsKA19zbhgCIAEoCRIV",
          "Cg1fZW5naW5lX2NvdW50GAMgASgFEhQKDF91Y29kZV9tYWpvchgEIAEoBRIU",
          "CgxfdWNvZGVfbWlub3IYBSABKAUSGwoHX2JvYXJkcxgGIAMoCzIKLkJvYXJk",
          "RGF0YRIgCghfZmVDaGFucxgHIAMoCzIOLkZlQ2hhbm5lbERhdGESIAoIX2Jl",
          "Q2hhbnMYCCADKAsyDi5CZUNoYW5uZWxEYXRhEiIKCV9yZGZDaGFucxgJIAMo",
          "CzIPLlJkZkNoYW5uZWxEYXRhEhkKBl9kaXNrcxgKIAMoCzIJLkRpc2tEYXRh",
          "EiEKCl9yZGZHcm91cHMYCyADKAsyDS5SZGZHcm91cERhdGESFwoFX3Nsb3MY",
          "DCADKAsyCC5TTE9EYXRhEiYKCl9kYXRhcG9vbHMYDSADKAsyEi5WTUFYM0Rh",
          "dGFQb29sRGF0YRIiCglfdGhpbkRldnMYDiADKAsyDy5UaGluRGV2aWNlRGF0",
          "YRI/CgxfY2hhbkJvYXJkTXAYDyADKAsyKS5WTUFYM0NvbmZpZ3VyYXRpb25Q",
          "cm90by5DaGFuQm9hcmRNcEVudHJ5Eh8KBl90ZGF0cxgQIAMoCzIPLkRhdGFE",
          "ZXZpY2VEYXRhEhsKB19lZGlza3MYESADKAsyCi5FRGlza0RhdGESFwoFX3Ny",
          "cHMYEiADKAsyCC5TUlBEYXRhEiMKCF9zZ3JvdXBzGBMgAygLMhEuU3RvcmFn",
          "ZUdyb3VwRGF0YRIjCgtfZGlza0dyb3VwcxgUIAMoCzIOLkRpc2tHcm91cERh",
          "dGESOQoJX2RldkZlTWFwGBUgAygLMiYuVk1BWDNDb25maWd1cmF0aW9uUHJv",
          "dG8uRGV2RmVNYXBFbnRyeRI7CgpfZGlza0JlTWFwGBYgAygLMicuVk1BWDND",
          "b25maWd1cmF0aW9uUHJvdG8uRGlza0JlTWFwRW50cnkSPQoLX2VkaXNrRmVN",
          "YXAYFyADKAsyKC5WTUFYM0NvbmZpZ3VyYXRpb25Qcm90by5FZGlza0ZlTWFw",
          "RW50cnkSOQoJX3NnRGV2TWFwGBggAygLMiYuVk1BWDNDb25maWd1cmF0aW9u",
          "UHJvdG8uU2dEZXZNYXBFbnRyeRJHChBfcmRmZ3JvdXBDaGFuTWFwGBkgAygL",
          "Mi0uVk1BWDNDb25maWd1cmF0aW9uUHJvdG8uUmRmZ3JvdXBDaGFuTWFwRW50",
          "cnkSRQoPX3JkZmdyb3VwRGV2TWFwGBogAygLMiwuVk1BWDNDb25maWd1cmF0",
          "aW9uUHJvdG8uUmRmZ3JvdXBEZXZNYXBFbnRyeRJBCg1fc2dyb3VwU2xvTWFw",
          "GBsgAygLMiouVk1BWDNDb25maWd1cmF0aW9uUHJvdG8uU2dyb3VwU2xvTWFw",
          "RW50cnkaMgoQQ2hhbkJvYXJkTXBFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
          "dWUYAiABKAk6AjgBGjwKDURldkZlTWFwRW50cnkSCwoDa2V5GAEgASgJEhoK",
          "BXZhbHVlGAIgASgLMgsuU3RyaW5nTGlzdDoCOAEaPQoORGlza0JlTWFwRW50",
          "cnkSCwoDa2V5GAEgASgJEhoKBXZhbHVlGAIgASgLMgsuU3RyaW5nTGlzdDoC",
          "OAEaPgoPRWRpc2tGZU1hcEVudHJ5EgsKA2tleRgBIAEoCRIaCgV2YWx1ZRgC",
          "IAEoCzILLlN0cmluZ0xpc3Q6AjgBGjwKDVNnRGV2TWFwRW50cnkSCwoDa2V5",
          "GAEgASgJEhoKBXZhbHVlGAIgASgLMgsuU3RyaW5nTGlzdDoCOAEaQwoUUmRm",
          "Z3JvdXBDaGFuTWFwRW50cnkSCwoDa2V5GAEgASgJEhoKBXZhbHVlGAIgASgL",
          "MgsuU3RyaW5nTGlzdDoCOAEaQgoTUmRmZ3JvdXBEZXZNYXBFbnRyeRILCgNr",
          "ZXkYASABKAkSGgoFdmFsdWUYAiABKAsyCy5TdHJpbmdMaXN0OgI4ARpAChFT",
          "Z3JvdXBTbG9NYXBFbnRyeRILCgNrZXkYASABKAkSGgoFdmFsdWUYAiABKAsy",
          "Cy5TdHJpbmdMaXN0OgI4ASJtCg1CZUNoYW5uZWxEYXRhEg0KBV9uYW1lGAEg",
          "ASgJEhIKCl9jaGFuX3R5cGUYAiABKAkSFAoMX2NvbXByZXNzaW9uGAMgASgB",
          "EhQKDF9zcGVlZF9saW1pdBgEIAEoARINCgVpbmRleBgFIAEoBSJtCg1GZUNo",
          "YW5uZWxEYXRhEg0KBV9uYW1lGAEgASgJEhIKCl9jaGFuX3R5cGUYAiABKAkS",
          "FAoMX2NvbXByZXNzaW9uGAMgASgBEhQKDF9zcGVlZF9saW1pdBgEIAEoARIN",
          "CgVpbmRleBgFIAEoBSJuCg5SZGZDaGFubmVsRGF0YRINCgVfbmFtZRgBIAEo",
          "CRISCgpfY2hhbl90eXBlGAIgASgJEhQKDF9jb21wcmVzc2lvbhgDIAEoARIU",
          "Cgxfc3BlZWRfbGltaXQYBCABKAESDQoFaW5kZXgYBSABKAUiYQoIRGlza0Rh",
          "dGESDQoFX25hbWUYASABKAkSDgoGX21vZGVsGAIgASgJEhIKCl9kaXNrZ3Jv",
          "dXAYAyABKAkSEAoIX3NwaW5kbGUYBCABKAkSEAoIX2lzU3BhcmUYBSABKAgi",
          "GgoJQm9hcmREYXRhEg0KBV9uYW1lGAEgASgJIngKEVZNQVgzRGF0YVBvb2xE",
          "YXRhEg0KBV9uYW1lGAEgASgJEg4KBl90ZGF0cxgCIAMoCRIXCg9fZGlza2dy",
          "b3VwX25hbWUYAyABKAkSDQoFX3Byb3QYBCABKAkSDAoEX3NycBgFIAEoCRIO",
          "CgZfdGhpbnMYBiADKAkiHQoMUmRmR3JvdXBEYXRhEg0KBV9uYW1lGAEgASgJ",
          "IkQKB1NMT0RhdGESDQoFX25hbWUYASABKAkSDQoFX2hpZ2gYAiABKAUSDAoE",
          "X2xvdxgDIAEoBRINCgVfcmFuaxgEIAEoBSJKCg5UaGluRGV2aWNlRGF0YRIN",
          "CgVfbmFtZRgBIAEoCRIUCgxfc2l6ZV9pbl9jeWwYAiABKAUSEwoLaXNNYWlu",
          "RnJhbWUYAyABKAgiUQoORGF0YURldmljZURhdGESDQoFX25hbWUYASABKAkS",
          "FwoPU2l6ZUluR2lnYUJ5dGVzGAIgASgBEhcKD0xvY2FsUHJvdGVjdGlvbhgD",
          "IAEoCSJiCglFRGlza0RhdGESDQoFX25hbWUYASABKAkSDgoGX21vZGVsGAIg",
          "ASgJEhIKCl9kaXNrZ3JvdXAYAyABKAkSEAoIX3NwaW5kbGUYBCABKAkSEAoI",
          "X2lzU3BhcmUYBSABKAgiGAoHU1JQRGF0YRINCgVfbmFtZRgBIAEoCSIhChBT",
          "dG9yYWdlR3JvdXBEYXRhEg0KBV9uYW1lGAEgASgJIkIKDURpc2tHcm91cERh",
          "dGESDQoFX25hbWUYASABKAkSDQoFbW9kZWwYAiABKAkSEwoLX3NpemVfaW5f",
          "Z2IYAyABKAEiGgoKU3RyaW5nTGlzdBIMCgRsaXN0GAEgAygJYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::VMAX3ConfigurationProto), global::VMAX3ConfigurationProto.Parser, new[]{ "Model", "Sn", "EngineCount", "UcodeMajor", "UcodeMinor", "Boards", "FeChans", "BeChans", "RdfChans", "Disks", "RdfGroups", "Slos", "Datapools", "ThinDevs", "ChanBoardMp", "Tdats", "Edisks", "Srps", "Sgroups", "DiskGroups", "DevFeMap", "DiskBeMap", "EdiskFeMap", "SgDevMap", "RdfgroupChanMap", "RdfgroupDevMap", "SgroupSloMap" }, null, null, new pbr::GeneratedCodeInfo[] { null, null, null, null, null, null, null, null, }),
          new pbr::GeneratedCodeInfo(typeof(global::BeChannelData), global::BeChannelData.Parser, new[]{ "Name", "ChanType", "Compression", "SpeedLimit", "Index" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::FeChannelData), global::FeChannelData.Parser, new[]{ "Name", "ChanType", "Compression", "SpeedLimit", "Index" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RdfChannelData), global::RdfChannelData.Parser, new[]{ "Name", "ChanType", "Compression", "SpeedLimit", "Index" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DiskData), global::DiskData.Parser, new[]{ "Name", "Model", "Diskgroup", "Spindle", "IsSpare" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::BoardData), global::BoardData.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::VMAX3DataPoolData), global::VMAX3DataPoolData.Parser, new[]{ "Name", "Tdats", "DiskgroupName", "Prot", "Srp", "Thins" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RdfGroupData), global::RdfGroupData.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SLOData), global::SLOData.Parser, new[]{ "Name", "High", "Low", "Rank" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ThinDeviceData), global::ThinDeviceData.Parser, new[]{ "Name", "SizeInCyl", "IsMainFrame" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DataDeviceData), global::DataDeviceData.Parser, new[]{ "Name", "SizeInGigaBytes", "LocalProtection" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EDiskData), global::EDiskData.Parser, new[]{ "Name", "Model", "Diskgroup", "Spindle", "IsSpare" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SRPData), global::SRPData.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::StorageGroupData), global::StorageGroupData.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DiskGroupData), global::DiskGroupData.Parser, new[]{ "Name", "Model", "SizeInGb" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::StringList), global::StringList.Parser, new[]{ "List" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class VMAX3ConfigurationProto : pb::IMessage<VMAX3ConfigurationProto> {
  private static readonly pb::MessageParser<VMAX3ConfigurationProto> _parser = new pb::MessageParser<VMAX3ConfigurationProto>(() => new VMAX3ConfigurationProto());
  public static pb::MessageParser<VMAX3ConfigurationProto> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public VMAX3ConfigurationProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  public VMAX3ConfigurationProto(VMAX3ConfigurationProto other) : this() {
    Model_ = other.Model_;
    Sn_ = other.Sn_;
    EngineCount_ = other.EngineCount_;
    UcodeMajor_ = other.UcodeMajor_;
    UcodeMinor_ = other.UcodeMinor_;
    Boards_ = other.Boards_.Clone();
    FeChans_ = other.FeChans_.Clone();
    BeChans_ = other.BeChans_.Clone();
    RdfChans_ = other.RdfChans_.Clone();
    Disks_ = other.Disks_.Clone();
    RdfGroups_ = other.RdfGroups_.Clone();
    Slos_ = other.Slos_.Clone();
    Datapools_ = other.Datapools_.Clone();
    ThinDevs_ = other.ThinDevs_.Clone();
    ChanBoardMp_ = other.ChanBoardMp_.Clone();
    Tdats_ = other.Tdats_.Clone();
    Edisks_ = other.Edisks_.Clone();
    Srps_ = other.Srps_.Clone();
    Sgroups_ = other.Sgroups_.Clone();
    DiskGroups_ = other.DiskGroups_.Clone();
    DevFeMap_ = other.DevFeMap_.Clone();
    DiskBeMap_ = other.DiskBeMap_.Clone();
    EdiskFeMap_ = other.EdiskFeMap_.Clone();
    SgDevMap_ = other.SgDevMap_.Clone();
    RdfgroupChanMap_ = other.RdfgroupChanMap_.Clone();
    RdfgroupDevMap_ = other.RdfgroupDevMap_.Clone();
    SgroupSloMap_ = other.SgroupSloMap_.Clone();
  }

  public VMAX3ConfigurationProto Clone() {
    return new VMAX3ConfigurationProto(this);
  }

  /// <summary>Field number for the "_model" field.</summary>
  public const int ModelFieldNumber = 1;
  private string Model_ = "";
  public string Model {
    get { return Model_; }
    set {
      Model_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_sn" field.</summary>
  public const int SnFieldNumber = 2;
  private string Sn_ = "";
  public string Sn {
    get { return Sn_; }
    set {
      Sn_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_engine_count" field.</summary>
  public const int EngineCountFieldNumber = 3;
  private int EngineCount_;
  public int EngineCount {
    get { return EngineCount_; }
    set {
      EngineCount_ = value;
    }
  }

  /// <summary>Field number for the "_ucode_major" field.</summary>
  public const int UcodeMajorFieldNumber = 4;
  private int UcodeMajor_;
  public int UcodeMajor {
    get { return UcodeMajor_; }
    set {
      UcodeMajor_ = value;
    }
  }

  /// <summary>Field number for the "_ucode_minor" field.</summary>
  public const int UcodeMinorFieldNumber = 5;
  private int UcodeMinor_;
  public int UcodeMinor {
    get { return UcodeMinor_; }
    set {
      UcodeMinor_ = value;
    }
  }

  /// <summary>Field number for the "_boards" field.</summary>
  public const int BoardsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::BoardData> _repeated_Boards_codec
      = pb::FieldCodec.ForMessage(50, global::BoardData.Parser);
  private readonly pbc::RepeatedField<global::BoardData> Boards_ = new pbc::RepeatedField<global::BoardData>();
  public pbc::RepeatedField<global::BoardData> Boards {
    get { return Boards_; }
  }

  /// <summary>Field number for the "_feChans" field.</summary>
  public const int FeChansFieldNumber = 7;
  private static readonly pb::FieldCodec<global::FeChannelData> _repeated_FeChans_codec
      = pb::FieldCodec.ForMessage(58, global::FeChannelData.Parser);
  private readonly pbc::RepeatedField<global::FeChannelData> FeChans_ = new pbc::RepeatedField<global::FeChannelData>();
  public pbc::RepeatedField<global::FeChannelData> FeChans {
    get { return FeChans_; }
  }

  /// <summary>Field number for the "_beChans" field.</summary>
  public const int BeChansFieldNumber = 8;
  private static readonly pb::FieldCodec<global::BeChannelData> _repeated_BeChans_codec
      = pb::FieldCodec.ForMessage(66, global::BeChannelData.Parser);
  private readonly pbc::RepeatedField<global::BeChannelData> BeChans_ = new pbc::RepeatedField<global::BeChannelData>();
  public pbc::RepeatedField<global::BeChannelData> BeChans {
    get { return BeChans_; }
  }

  /// <summary>Field number for the "_rdfChans" field.</summary>
  public const int RdfChansFieldNumber = 9;
  private static readonly pb::FieldCodec<global::RdfChannelData> _repeated_RdfChans_codec
      = pb::FieldCodec.ForMessage(74, global::RdfChannelData.Parser);
  private readonly pbc::RepeatedField<global::RdfChannelData> RdfChans_ = new pbc::RepeatedField<global::RdfChannelData>();
  public pbc::RepeatedField<global::RdfChannelData> RdfChans {
    get { return RdfChans_; }
  }

  /// <summary>Field number for the "_disks" field.</summary>
  public const int DisksFieldNumber = 10;
  private static readonly pb::FieldCodec<global::DiskData> _repeated_Disks_codec
      = pb::FieldCodec.ForMessage(82, global::DiskData.Parser);
  private readonly pbc::RepeatedField<global::DiskData> Disks_ = new pbc::RepeatedField<global::DiskData>();
  public pbc::RepeatedField<global::DiskData> Disks {
    get { return Disks_; }
  }

  /// <summary>Field number for the "_rdfGroups" field.</summary>
  public const int RdfGroupsFieldNumber = 11;
  private static readonly pb::FieldCodec<global::RdfGroupData> _repeated_RdfGroups_codec
      = pb::FieldCodec.ForMessage(90, global::RdfGroupData.Parser);
  private readonly pbc::RepeatedField<global::RdfGroupData> RdfGroups_ = new pbc::RepeatedField<global::RdfGroupData>();
  public pbc::RepeatedField<global::RdfGroupData> RdfGroups {
    get { return RdfGroups_; }
  }

  /// <summary>Field number for the "_slos" field.</summary>
  public const int SlosFieldNumber = 12;
  private static readonly pb::FieldCodec<global::SLOData> _repeated_Slos_codec
      = pb::FieldCodec.ForMessage(98, global::SLOData.Parser);
  private readonly pbc::RepeatedField<global::SLOData> Slos_ = new pbc::RepeatedField<global::SLOData>();
  public pbc::RepeatedField<global::SLOData> Slos {
    get { return Slos_; }
  }

  /// <summary>Field number for the "_datapools" field.</summary>
  public const int DatapoolsFieldNumber = 13;
  private static readonly pb::FieldCodec<global::VMAX3DataPoolData> _repeated_Datapools_codec
      = pb::FieldCodec.ForMessage(106, global::VMAX3DataPoolData.Parser);
  private readonly pbc::RepeatedField<global::VMAX3DataPoolData> Datapools_ = new pbc::RepeatedField<global::VMAX3DataPoolData>();
  public pbc::RepeatedField<global::VMAX3DataPoolData> Datapools {
    get { return Datapools_; }
  }

  /// <summary>Field number for the "_thinDevs" field.</summary>
  public const int ThinDevsFieldNumber = 14;
  private static readonly pb::FieldCodec<global::ThinDeviceData> _repeated_ThinDevs_codec
      = pb::FieldCodec.ForMessage(114, global::ThinDeviceData.Parser);
  private readonly pbc::RepeatedField<global::ThinDeviceData> ThinDevs_ = new pbc::RepeatedField<global::ThinDeviceData>();
  public pbc::RepeatedField<global::ThinDeviceData> ThinDevs {
    get { return ThinDevs_; }
  }

  /// <summary>Field number for the "_chanBoardMp" field.</summary>
  public const int ChanBoardMpFieldNumber = 15;
  private static readonly pbc::MapField<string, string>.Codec _map_ChanBoardMp_codec
      = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 122);
  private readonly pbc::MapField<string, string> ChanBoardMp_ = new pbc::MapField<string, string>();
  public pbc::MapField<string, string> ChanBoardMp {
    get { return ChanBoardMp_; }
  }

  /// <summary>Field number for the "_tdats" field.</summary>
  public const int TdatsFieldNumber = 16;
  private static readonly pb::FieldCodec<global::DataDeviceData> _repeated_Tdats_codec
      = pb::FieldCodec.ForMessage(130, global::DataDeviceData.Parser);
  private readonly pbc::RepeatedField<global::DataDeviceData> Tdats_ = new pbc::RepeatedField<global::DataDeviceData>();
  public pbc::RepeatedField<global::DataDeviceData> Tdats {
    get { return Tdats_; }
  }

  /// <summary>Field number for the "_edisks" field.</summary>
  public const int EdisksFieldNumber = 17;
  private static readonly pb::FieldCodec<global::EDiskData> _repeated_Edisks_codec
      = pb::FieldCodec.ForMessage(138, global::EDiskData.Parser);
  private readonly pbc::RepeatedField<global::EDiskData> Edisks_ = new pbc::RepeatedField<global::EDiskData>();
  public pbc::RepeatedField<global::EDiskData> Edisks {
    get { return Edisks_; }
  }

  /// <summary>Field number for the "_srps" field.</summary>
  public const int SrpsFieldNumber = 18;
  private static readonly pb::FieldCodec<global::SRPData> _repeated_Srps_codec
      = pb::FieldCodec.ForMessage(146, global::SRPData.Parser);
  private readonly pbc::RepeatedField<global::SRPData> Srps_ = new pbc::RepeatedField<global::SRPData>();
  public pbc::RepeatedField<global::SRPData> Srps {
    get { return Srps_; }
  }

  /// <summary>Field number for the "_sgroups" field.</summary>
  public const int SgroupsFieldNumber = 19;
  private static readonly pb::FieldCodec<global::StorageGroupData> _repeated_Sgroups_codec
      = pb::FieldCodec.ForMessage(154, global::StorageGroupData.Parser);
  private readonly pbc::RepeatedField<global::StorageGroupData> Sgroups_ = new pbc::RepeatedField<global::StorageGroupData>();
  public pbc::RepeatedField<global::StorageGroupData> Sgroups {
    get { return Sgroups_; }
  }

  /// <summary>Field number for the "_diskGroups" field.</summary>
  public const int DiskGroupsFieldNumber = 20;
  private static readonly pb::FieldCodec<global::DiskGroupData> _repeated_DiskGroups_codec
      = pb::FieldCodec.ForMessage(162, global::DiskGroupData.Parser);
  private readonly pbc::RepeatedField<global::DiskGroupData> DiskGroups_ = new pbc::RepeatedField<global::DiskGroupData>();
  public pbc::RepeatedField<global::DiskGroupData> DiskGroups {
    get { return DiskGroups_; }
  }

  /// <summary>Field number for the "_devFeMap" field.</summary>
  public const int DevFeMapFieldNumber = 21;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_DevFeMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 170);
  private readonly pbc::MapField<string, global::StringList> DevFeMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> DevFeMap {
    get { return DevFeMap_; }
  }

  /// <summary>Field number for the "_diskBeMap" field.</summary>
  public const int DiskBeMapFieldNumber = 22;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_DiskBeMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 178);
  private readonly pbc::MapField<string, global::StringList> DiskBeMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> DiskBeMap {
    get { return DiskBeMap_; }
  }

  /// <summary>Field number for the "_ediskFeMap" field.</summary>
  public const int EdiskFeMapFieldNumber = 23;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_EdiskFeMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 186);
  private readonly pbc::MapField<string, global::StringList> EdiskFeMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> EdiskFeMap {
    get { return EdiskFeMap_; }
  }

  /// <summary>Field number for the "_sgDevMap" field.</summary>
  public const int SgDevMapFieldNumber = 24;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_SgDevMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 194);
  private readonly pbc::MapField<string, global::StringList> SgDevMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> SgDevMap {
    get { return SgDevMap_; }
  }

  /// <summary>Field number for the "_rdfgroupChanMap" field.</summary>
  public const int RdfgroupChanMapFieldNumber = 25;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_RdfgroupChanMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 202);
  private readonly pbc::MapField<string, global::StringList> RdfgroupChanMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> RdfgroupChanMap {
    get { return RdfgroupChanMap_; }
  }

  /// <summary>Field number for the "_rdfgroupDevMap" field.</summary>
  public const int RdfgroupDevMapFieldNumber = 26;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_RdfgroupDevMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 210);
  private readonly pbc::MapField<string, global::StringList> RdfgroupDevMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> RdfgroupDevMap {
    get { return RdfgroupDevMap_; }
  }

  /// <summary>Field number for the "_sgroupSloMap" field.</summary>
  public const int SgroupSloMapFieldNumber = 27;
  private static readonly pbc::MapField<string, global::StringList>.Codec _map_SgroupSloMap_codec
      = new pbc::MapField<string, global::StringList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::StringList.Parser), 218);
  private readonly pbc::MapField<string, global::StringList> SgroupSloMap_ = new pbc::MapField<string, global::StringList>();
  public pbc::MapField<string, global::StringList> SgroupSloMap {
    get { return SgroupSloMap_; }
  }

  public override bool Equals(object other) {
    return Equals(other as VMAX3ConfigurationProto);
  }

  public bool Equals(VMAX3ConfigurationProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Model != other.Model) return false;
    if (Sn != other.Sn) return false;
    if (EngineCount != other.EngineCount) return false;
    if (UcodeMajor != other.UcodeMajor) return false;
    if (UcodeMinor != other.UcodeMinor) return false;
    if(!Boards_.Equals(other.Boards_)) return false;
    if(!FeChans_.Equals(other.FeChans_)) return false;
    if(!BeChans_.Equals(other.BeChans_)) return false;
    if(!RdfChans_.Equals(other.RdfChans_)) return false;
    if(!Disks_.Equals(other.Disks_)) return false;
    if(!RdfGroups_.Equals(other.RdfGroups_)) return false;
    if(!Slos_.Equals(other.Slos_)) return false;
    if(!Datapools_.Equals(other.Datapools_)) return false;
    if(!ThinDevs_.Equals(other.ThinDevs_)) return false;
    if (!ChanBoardMp.Equals(other.ChanBoardMp)) return false;
    if(!Tdats_.Equals(other.Tdats_)) return false;
    if(!Edisks_.Equals(other.Edisks_)) return false;
    if(!Srps_.Equals(other.Srps_)) return false;
    if(!Sgroups_.Equals(other.Sgroups_)) return false;
    if(!DiskGroups_.Equals(other.DiskGroups_)) return false;
    if (!DevFeMap.Equals(other.DevFeMap)) return false;
    if (!DiskBeMap.Equals(other.DiskBeMap)) return false;
    if (!EdiskFeMap.Equals(other.EdiskFeMap)) return false;
    if (!SgDevMap.Equals(other.SgDevMap)) return false;
    if (!RdfgroupChanMap.Equals(other.RdfgroupChanMap)) return false;
    if (!RdfgroupDevMap.Equals(other.RdfgroupDevMap)) return false;
    if (!SgroupSloMap.Equals(other.SgroupSloMap)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Model.Length != 0) hash ^= Model.GetHashCode();
    if (Sn.Length != 0) hash ^= Sn.GetHashCode();
    if (EngineCount != 0) hash ^= EngineCount.GetHashCode();
    if (UcodeMajor != 0) hash ^= UcodeMajor.GetHashCode();
    if (UcodeMinor != 0) hash ^= UcodeMinor.GetHashCode();
    hash ^= Boards_.GetHashCode();
    hash ^= FeChans_.GetHashCode();
    hash ^= BeChans_.GetHashCode();
    hash ^= RdfChans_.GetHashCode();
    hash ^= Disks_.GetHashCode();
    hash ^= RdfGroups_.GetHashCode();
    hash ^= Slos_.GetHashCode();
    hash ^= Datapools_.GetHashCode();
    hash ^= ThinDevs_.GetHashCode();
    hash ^= ChanBoardMp.GetHashCode();
    hash ^= Tdats_.GetHashCode();
    hash ^= Edisks_.GetHashCode();
    hash ^= Srps_.GetHashCode();
    hash ^= Sgroups_.GetHashCode();
    hash ^= DiskGroups_.GetHashCode();
    hash ^= DevFeMap.GetHashCode();
    hash ^= DiskBeMap.GetHashCode();
    hash ^= EdiskFeMap.GetHashCode();
    hash ^= SgDevMap.GetHashCode();
    hash ^= RdfgroupChanMap.GetHashCode();
    hash ^= RdfgroupDevMap.GetHashCode();
    hash ^= SgroupSloMap.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Model.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Model);
    }
    if (Sn.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Sn);
    }
    if (EngineCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(EngineCount);
    }
    if (UcodeMajor != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UcodeMajor);
    }
    if (UcodeMinor != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(UcodeMinor);
    }
    Boards_.WriteTo(output, _repeated_Boards_codec);
    FeChans_.WriteTo(output, _repeated_FeChans_codec);
    BeChans_.WriteTo(output, _repeated_BeChans_codec);
    RdfChans_.WriteTo(output, _repeated_RdfChans_codec);
    Disks_.WriteTo(output, _repeated_Disks_codec);
    RdfGroups_.WriteTo(output, _repeated_RdfGroups_codec);
    Slos_.WriteTo(output, _repeated_Slos_codec);
    Datapools_.WriteTo(output, _repeated_Datapools_codec);
    ThinDevs_.WriteTo(output, _repeated_ThinDevs_codec);
    ChanBoardMp_.WriteTo(output, _map_ChanBoardMp_codec);
    Tdats_.WriteTo(output, _repeated_Tdats_codec);
    Edisks_.WriteTo(output, _repeated_Edisks_codec);
    Srps_.WriteTo(output, _repeated_Srps_codec);
    Sgroups_.WriteTo(output, _repeated_Sgroups_codec);
    DiskGroups_.WriteTo(output, _repeated_DiskGroups_codec);
    DevFeMap_.WriteTo(output, _map_DevFeMap_codec);
    DiskBeMap_.WriteTo(output, _map_DiskBeMap_codec);
    EdiskFeMap_.WriteTo(output, _map_EdiskFeMap_codec);
    SgDevMap_.WriteTo(output, _map_SgDevMap_codec);
    RdfgroupChanMap_.WriteTo(output, _map_RdfgroupChanMap_codec);
    RdfgroupDevMap_.WriteTo(output, _map_RdfgroupDevMap_codec);
    SgroupSloMap_.WriteTo(output, _map_SgroupSloMap_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Model.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
    }
    if (Sn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sn);
    }
    if (EngineCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EngineCount);
    }
    if (UcodeMajor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UcodeMajor);
    }
    if (UcodeMinor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UcodeMinor);
    }
    size += Boards_.CalculateSize(_repeated_Boards_codec);
    size += FeChans_.CalculateSize(_repeated_FeChans_codec);
    size += BeChans_.CalculateSize(_repeated_BeChans_codec);
    size += RdfChans_.CalculateSize(_repeated_RdfChans_codec);
    size += Disks_.CalculateSize(_repeated_Disks_codec);
    size += RdfGroups_.CalculateSize(_repeated_RdfGroups_codec);
    size += Slos_.CalculateSize(_repeated_Slos_codec);
    size += Datapools_.CalculateSize(_repeated_Datapools_codec);
    size += ThinDevs_.CalculateSize(_repeated_ThinDevs_codec);
    size += ChanBoardMp_.CalculateSize(_map_ChanBoardMp_codec);
    size += Tdats_.CalculateSize(_repeated_Tdats_codec);
    size += Edisks_.CalculateSize(_repeated_Edisks_codec);
    size += Srps_.CalculateSize(_repeated_Srps_codec);
    size += Sgroups_.CalculateSize(_repeated_Sgroups_codec);
    size += DiskGroups_.CalculateSize(_repeated_DiskGroups_codec);
    size += DevFeMap_.CalculateSize(_map_DevFeMap_codec);
    size += DiskBeMap_.CalculateSize(_map_DiskBeMap_codec);
    size += EdiskFeMap_.CalculateSize(_map_EdiskFeMap_codec);
    size += SgDevMap_.CalculateSize(_map_SgDevMap_codec);
    size += RdfgroupChanMap_.CalculateSize(_map_RdfgroupChanMap_codec);
    size += RdfgroupDevMap_.CalculateSize(_map_RdfgroupDevMap_codec);
    size += SgroupSloMap_.CalculateSize(_map_SgroupSloMap_codec);
    return size;
  }

  public void MergeFrom(VMAX3ConfigurationProto other) {
    if (other == null) {
      return;
    }
    if (other.Model.Length != 0) {
      Model = other.Model;
    }
    if (other.Sn.Length != 0) {
      Sn = other.Sn;
    }
    if (other.EngineCount != 0) {
      EngineCount = other.EngineCount;
    }
    if (other.UcodeMajor != 0) {
      UcodeMajor = other.UcodeMajor;
    }
    if (other.UcodeMinor != 0) {
      UcodeMinor = other.UcodeMinor;
    }
    Boards_.Add(other.Boards_);
    FeChans_.Add(other.FeChans_);
    BeChans_.Add(other.BeChans_);
    RdfChans_.Add(other.RdfChans_);
    Disks_.Add(other.Disks_);
    RdfGroups_.Add(other.RdfGroups_);
    Slos_.Add(other.Slos_);
    Datapools_.Add(other.Datapools_);
    ThinDevs_.Add(other.ThinDevs_);
    ChanBoardMp_.Add(other.ChanBoardMp_);
    Tdats_.Add(other.Tdats_);
    Edisks_.Add(other.Edisks_);
    Srps_.Add(other.Srps_);
    Sgroups_.Add(other.Sgroups_);
    DiskGroups_.Add(other.DiskGroups_);
    DevFeMap_.Add(other.DevFeMap_);
    DiskBeMap_.Add(other.DiskBeMap_);
    EdiskFeMap_.Add(other.EdiskFeMap_);
    SgDevMap_.Add(other.SgDevMap_);
    RdfgroupChanMap_.Add(other.RdfgroupChanMap_);
    RdfgroupDevMap_.Add(other.RdfgroupDevMap_);
    SgroupSloMap_.Add(other.SgroupSloMap_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Model = input.ReadString();
          break;
        }
        case 18: {
          Sn = input.ReadString();
          break;
        }
        case 24: {
          EngineCount = input.ReadInt32();
          break;
        }
        case 32: {
          UcodeMajor = input.ReadInt32();
          break;
        }
        case 40: {
          UcodeMinor = input.ReadInt32();
          break;
        }
        case 50: {
          Boards_.AddEntriesFrom(input, _repeated_Boards_codec);
          break;
        }
        case 58: {
          FeChans_.AddEntriesFrom(input, _repeated_FeChans_codec);
          break;
        }
        case 66: {
          BeChans_.AddEntriesFrom(input, _repeated_BeChans_codec);
          break;
        }
        case 74: {
          RdfChans_.AddEntriesFrom(input, _repeated_RdfChans_codec);
          break;
        }
        case 82: {
          Disks_.AddEntriesFrom(input, _repeated_Disks_codec);
          break;
        }
        case 90: {
          RdfGroups_.AddEntriesFrom(input, _repeated_RdfGroups_codec);
          break;
        }
        case 98: {
          Slos_.AddEntriesFrom(input, _repeated_Slos_codec);
          break;
        }
        case 106: {
          Datapools_.AddEntriesFrom(input, _repeated_Datapools_codec);
          break;
        }
        case 114: {
          ThinDevs_.AddEntriesFrom(input, _repeated_ThinDevs_codec);
          break;
        }
        case 122: {
          ChanBoardMp_.AddEntriesFrom(input, _map_ChanBoardMp_codec);
          break;
        }
        case 130: {
          Tdats_.AddEntriesFrom(input, _repeated_Tdats_codec);
          break;
        }
        case 138: {
          Edisks_.AddEntriesFrom(input, _repeated_Edisks_codec);
          break;
        }
        case 146: {
          Srps_.AddEntriesFrom(input, _repeated_Srps_codec);
          break;
        }
        case 154: {
          Sgroups_.AddEntriesFrom(input, _repeated_Sgroups_codec);
          break;
        }
        case 162: {
          DiskGroups_.AddEntriesFrom(input, _repeated_DiskGroups_codec);
          break;
        }
        case 170: {
          DevFeMap_.AddEntriesFrom(input, _map_DevFeMap_codec);
          break;
        }
        case 178: {
          DiskBeMap_.AddEntriesFrom(input, _map_DiskBeMap_codec);
          break;
        }
        case 186: {
          EdiskFeMap_.AddEntriesFrom(input, _map_EdiskFeMap_codec);
          break;
        }
        case 194: {
          SgDevMap_.AddEntriesFrom(input, _map_SgDevMap_codec);
          break;
        }
        case 202: {
          RdfgroupChanMap_.AddEntriesFrom(input, _map_RdfgroupChanMap_codec);
          break;
        }
        case 210: {
          RdfgroupDevMap_.AddEntriesFrom(input, _map_RdfgroupDevMap_codec);
          break;
        }
        case 218: {
          SgroupSloMap_.AddEntriesFrom(input, _map_SgroupSloMap_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BeChannelData : pb::IMessage<BeChannelData> {
  private static readonly pb::MessageParser<BeChannelData> _parser = new pb::MessageParser<BeChannelData>(() => new BeChannelData());
  public static pb::MessageParser<BeChannelData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public BeChannelData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public BeChannelData(BeChannelData other) : this() {
    Name_ = other.Name_;
    ChanType_ = other.ChanType_;
    Compression_ = other.Compression_;
    SpeedLimit_ = other.SpeedLimit_;
    index_ = other.index_;
  }

  public BeChannelData Clone() {
    return new BeChannelData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_chan_type" field.</summary>
  public const int ChanTypeFieldNumber = 2;
  private string ChanType_ = "";
  public string ChanType {
    get { return ChanType_; }
    set {
      ChanType_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_compression" field.</summary>
  public const int CompressionFieldNumber = 3;
  private double Compression_;
  public double Compression {
    get { return Compression_; }
    set {
      Compression_ = value;
    }
  }

  /// <summary>Field number for the "_speed_limit" field.</summary>
  public const int SpeedLimitFieldNumber = 4;
  private double SpeedLimit_;
  public double SpeedLimit {
    get { return SpeedLimit_; }
    set {
      SpeedLimit_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 5;
  private int index_;
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as BeChannelData);
  }

  public bool Equals(BeChannelData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (ChanType != other.ChanType) return false;
    if (Compression != other.Compression) return false;
    if (SpeedLimit != other.SpeedLimit) return false;
    if (Index != other.Index) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (ChanType.Length != 0) hash ^= ChanType.GetHashCode();
    if (Compression != 0D) hash ^= Compression.GetHashCode();
    if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (ChanType.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ChanType);
    }
    if (Compression != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Compression);
    }
    if (SpeedLimit != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(SpeedLimit);
    }
    if (Index != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Index);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (ChanType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanType);
    }
    if (Compression != 0D) {
      size += 1 + 8;
    }
    if (SpeedLimit != 0D) {
      size += 1 + 8;
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    return size;
  }

  public void MergeFrom(BeChannelData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.ChanType.Length != 0) {
      ChanType = other.ChanType;
    }
    if (other.Compression != 0D) {
      Compression = other.Compression;
    }
    if (other.SpeedLimit != 0D) {
      SpeedLimit = other.SpeedLimit;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          ChanType = input.ReadString();
          break;
        }
        case 25: {
          Compression = input.ReadDouble();
          break;
        }
        case 33: {
          SpeedLimit = input.ReadDouble();
          break;
        }
        case 40: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class FeChannelData : pb::IMessage<FeChannelData> {
  private static readonly pb::MessageParser<FeChannelData> _parser = new pb::MessageParser<FeChannelData>(() => new FeChannelData());
  public static pb::MessageParser<FeChannelData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public FeChannelData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public FeChannelData(FeChannelData other) : this() {
    Name_ = other.Name_;
    ChanType_ = other.ChanType_;
    Compression_ = other.Compression_;
    SpeedLimit_ = other.SpeedLimit_;
    index_ = other.index_;
  }

  public FeChannelData Clone() {
    return new FeChannelData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_chan_type" field.</summary>
  public const int ChanTypeFieldNumber = 2;
  private string ChanType_ = "";
  public string ChanType {
    get { return ChanType_; }
    set {
      ChanType_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_compression" field.</summary>
  public const int CompressionFieldNumber = 3;
  private double Compression_;
  public double Compression {
    get { return Compression_; }
    set {
      Compression_ = value;
    }
  }

  /// <summary>Field number for the "_speed_limit" field.</summary>
  public const int SpeedLimitFieldNumber = 4;
  private double SpeedLimit_;
  public double SpeedLimit {
    get { return SpeedLimit_; }
    set {
      SpeedLimit_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 5;
  private int index_;
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as FeChannelData);
  }

  public bool Equals(FeChannelData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (ChanType != other.ChanType) return false;
    if (Compression != other.Compression) return false;
    if (SpeedLimit != other.SpeedLimit) return false;
    if (Index != other.Index) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (ChanType.Length != 0) hash ^= ChanType.GetHashCode();
    if (Compression != 0D) hash ^= Compression.GetHashCode();
    if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (ChanType.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ChanType);
    }
    if (Compression != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Compression);
    }
    if (SpeedLimit != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(SpeedLimit);
    }
    if (Index != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Index);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (ChanType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanType);
    }
    if (Compression != 0D) {
      size += 1 + 8;
    }
    if (SpeedLimit != 0D) {
      size += 1 + 8;
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    return size;
  }

  public void MergeFrom(FeChannelData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.ChanType.Length != 0) {
      ChanType = other.ChanType;
    }
    if (other.Compression != 0D) {
      Compression = other.Compression;
    }
    if (other.SpeedLimit != 0D) {
      SpeedLimit = other.SpeedLimit;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          ChanType = input.ReadString();
          break;
        }
        case 25: {
          Compression = input.ReadDouble();
          break;
        }
        case 33: {
          SpeedLimit = input.ReadDouble();
          break;
        }
        case 40: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RdfChannelData : pb::IMessage<RdfChannelData> {
  private static readonly pb::MessageParser<RdfChannelData> _parser = new pb::MessageParser<RdfChannelData>(() => new RdfChannelData());
  public static pb::MessageParser<RdfChannelData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RdfChannelData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RdfChannelData(RdfChannelData other) : this() {
    Name_ = other.Name_;
    ChanType_ = other.ChanType_;
    Compression_ = other.Compression_;
    SpeedLimit_ = other.SpeedLimit_;
    index_ = other.index_;
  }

  public RdfChannelData Clone() {
    return new RdfChannelData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_chan_type" field.</summary>
  public const int ChanTypeFieldNumber = 2;
  private string ChanType_ = "";
  public string ChanType {
    get { return ChanType_; }
    set {
      ChanType_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_compression" field.</summary>
  public const int CompressionFieldNumber = 3;
  private double Compression_;
  public double Compression {
    get { return Compression_; }
    set {
      Compression_ = value;
    }
  }

  /// <summary>Field number for the "_speed_limit" field.</summary>
  public const int SpeedLimitFieldNumber = 4;
  private double SpeedLimit_;
  public double SpeedLimit {
    get { return SpeedLimit_; }
    set {
      SpeedLimit_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 5;
  private int index_;
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RdfChannelData);
  }

  public bool Equals(RdfChannelData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (ChanType != other.ChanType) return false;
    if (Compression != other.Compression) return false;
    if (SpeedLimit != other.SpeedLimit) return false;
    if (Index != other.Index) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (ChanType.Length != 0) hash ^= ChanType.GetHashCode();
    if (Compression != 0D) hash ^= Compression.GetHashCode();
    if (SpeedLimit != 0D) hash ^= SpeedLimit.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (ChanType.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ChanType);
    }
    if (Compression != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Compression);
    }
    if (SpeedLimit != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(SpeedLimit);
    }
    if (Index != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Index);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (ChanType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanType);
    }
    if (Compression != 0D) {
      size += 1 + 8;
    }
    if (SpeedLimit != 0D) {
      size += 1 + 8;
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    return size;
  }

  public void MergeFrom(RdfChannelData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.ChanType.Length != 0) {
      ChanType = other.ChanType;
    }
    if (other.Compression != 0D) {
      Compression = other.Compression;
    }
    if (other.SpeedLimit != 0D) {
      SpeedLimit = other.SpeedLimit;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          ChanType = input.ReadString();
          break;
        }
        case 25: {
          Compression = input.ReadDouble();
          break;
        }
        case 33: {
          SpeedLimit = input.ReadDouble();
          break;
        }
        case 40: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DiskData : pb::IMessage<DiskData> {
  private static readonly pb::MessageParser<DiskData> _parser = new pb::MessageParser<DiskData>(() => new DiskData());
  public static pb::MessageParser<DiskData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[4]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DiskData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DiskData(DiskData other) : this() {
    Name_ = other.Name_;
    Model_ = other.Model_;
    Diskgroup_ = other.Diskgroup_;
    Spindle_ = other.Spindle_;
    IsSpare_ = other.IsSpare_;
  }

  public DiskData Clone() {
    return new DiskData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_model" field.</summary>
  public const int ModelFieldNumber = 2;
  private string Model_ = "";
  public string Model {
    get { return Model_; }
    set {
      Model_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_diskgroup" field.</summary>
  public const int DiskgroupFieldNumber = 3;
  private string Diskgroup_ = "";
  public string Diskgroup {
    get { return Diskgroup_; }
    set {
      Diskgroup_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_spindle" field.</summary>
  public const int SpindleFieldNumber = 4;
  private string Spindle_ = "";
  public string Spindle {
    get { return Spindle_; }
    set {
      Spindle_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_isSpare" field.</summary>
  public const int IsSpareFieldNumber = 5;
  private bool IsSpare_;
  public bool IsSpare {
    get { return IsSpare_; }
    set {
      IsSpare_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DiskData);
  }

  public bool Equals(DiskData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Model != other.Model) return false;
    if (Diskgroup != other.Diskgroup) return false;
    if (Spindle != other.Spindle) return false;
    if (IsSpare != other.IsSpare) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Model.Length != 0) hash ^= Model.GetHashCode();
    if (Diskgroup.Length != 0) hash ^= Diskgroup.GetHashCode();
    if (Spindle.Length != 0) hash ^= Spindle.GetHashCode();
    if (IsSpare != false) hash ^= IsSpare.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Model.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Model);
    }
    if (Diskgroup.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Diskgroup);
    }
    if (Spindle.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Spindle);
    }
    if (IsSpare != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsSpare);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Model.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
    }
    if (Diskgroup.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Diskgroup);
    }
    if (Spindle.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Spindle);
    }
    if (IsSpare != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(DiskData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Model.Length != 0) {
      Model = other.Model;
    }
    if (other.Diskgroup.Length != 0) {
      Diskgroup = other.Diskgroup;
    }
    if (other.Spindle.Length != 0) {
      Spindle = other.Spindle;
    }
    if (other.IsSpare != false) {
      IsSpare = other.IsSpare;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Model = input.ReadString();
          break;
        }
        case 26: {
          Diskgroup = input.ReadString();
          break;
        }
        case 34: {
          Spindle = input.ReadString();
          break;
        }
        case 40: {
          IsSpare = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BoardData : pb::IMessage<BoardData> {
  private static readonly pb::MessageParser<BoardData> _parser = new pb::MessageParser<BoardData>(() => new BoardData());
  public static pb::MessageParser<BoardData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[5]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public BoardData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public BoardData(BoardData other) : this() {
    Name_ = other.Name_;
  }

  public BoardData Clone() {
    return new BoardData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as BoardData);
  }

  public bool Equals(BoardData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  public void MergeFrom(BoardData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class VMAX3DataPoolData : pb::IMessage<VMAX3DataPoolData> {
  private static readonly pb::MessageParser<VMAX3DataPoolData> _parser = new pb::MessageParser<VMAX3DataPoolData>(() => new VMAX3DataPoolData());
  public static pb::MessageParser<VMAX3DataPoolData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[6]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public VMAX3DataPoolData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public VMAX3DataPoolData(VMAX3DataPoolData other) : this() {
    Name_ = other.Name_;
    Tdats_ = other.Tdats_.Clone();
    DiskgroupName_ = other.DiskgroupName_;
    Prot_ = other.Prot_;
    Srp_ = other.Srp_;
    Thins_ = other.Thins_.Clone();
  }

  public VMAX3DataPoolData Clone() {
    return new VMAX3DataPoolData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_tdats" field.</summary>
  public const int TdatsFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_Tdats_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> Tdats_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Tdats {
    get { return Tdats_; }
  }

  /// <summary>Field number for the "_diskgroup_name" field.</summary>
  public const int DiskgroupNameFieldNumber = 3;
  private string DiskgroupName_ = "";
  public string DiskgroupName {
    get { return DiskgroupName_; }
    set {
      DiskgroupName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_prot" field.</summary>
  public const int ProtFieldNumber = 4;
  private string Prot_ = "";
  public string Prot {
    get { return Prot_; }
    set {
      Prot_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_srp" field.</summary>
  public const int SrpFieldNumber = 5;
  private string Srp_ = "";
  public string Srp {
    get { return Srp_; }
    set {
      Srp_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_thins" field.</summary>
  public const int ThinsFieldNumber = 6;
  private static readonly pb::FieldCodec<string> _repeated_Thins_codec
      = pb::FieldCodec.ForString(50);
  private readonly pbc::RepeatedField<string> Thins_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Thins {
    get { return Thins_; }
  }

  public override bool Equals(object other) {
    return Equals(other as VMAX3DataPoolData);
  }

  public bool Equals(VMAX3DataPoolData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if(!Tdats_.Equals(other.Tdats_)) return false;
    if (DiskgroupName != other.DiskgroupName) return false;
    if (Prot != other.Prot) return false;
    if (Srp != other.Srp) return false;
    if(!Thins_.Equals(other.Thins_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= Tdats_.GetHashCode();
    if (DiskgroupName.Length != 0) hash ^= DiskgroupName.GetHashCode();
    if (Prot.Length != 0) hash ^= Prot.GetHashCode();
    if (Srp.Length != 0) hash ^= Srp.GetHashCode();
    hash ^= Thins_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    Tdats_.WriteTo(output, _repeated_Tdats_codec);
    if (DiskgroupName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DiskgroupName);
    }
    if (Prot.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Prot);
    }
    if (Srp.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Srp);
    }
    Thins_.WriteTo(output, _repeated_Thins_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += Tdats_.CalculateSize(_repeated_Tdats_codec);
    if (DiskgroupName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskgroupName);
    }
    if (Prot.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Prot);
    }
    if (Srp.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Srp);
    }
    size += Thins_.CalculateSize(_repeated_Thins_codec);
    return size;
  }

  public void MergeFrom(VMAX3DataPoolData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    Tdats_.Add(other.Tdats_);
    if (other.DiskgroupName.Length != 0) {
      DiskgroupName = other.DiskgroupName;
    }
    if (other.Prot.Length != 0) {
      Prot = other.Prot;
    }
    if (other.Srp.Length != 0) {
      Srp = other.Srp;
    }
    Thins_.Add(other.Thins_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Tdats_.AddEntriesFrom(input, _repeated_Tdats_codec);
          break;
        }
        case 26: {
          DiskgroupName = input.ReadString();
          break;
        }
        case 34: {
          Prot = input.ReadString();
          break;
        }
        case 42: {
          Srp = input.ReadString();
          break;
        }
        case 50: {
          Thins_.AddEntriesFrom(input, _repeated_Thins_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RdfGroupData : pb::IMessage<RdfGroupData> {
  private static readonly pb::MessageParser<RdfGroupData> _parser = new pb::MessageParser<RdfGroupData>(() => new RdfGroupData());
  public static pb::MessageParser<RdfGroupData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[7]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RdfGroupData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RdfGroupData(RdfGroupData other) : this() {
    Name_ = other.Name_;
  }

  public RdfGroupData Clone() {
    return new RdfGroupData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RdfGroupData);
  }

  public bool Equals(RdfGroupData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  public void MergeFrom(RdfGroupData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SLOData : pb::IMessage<SLOData> {
  private static readonly pb::MessageParser<SLOData> _parser = new pb::MessageParser<SLOData>(() => new SLOData());
  public static pb::MessageParser<SLOData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[8]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SLOData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SLOData(SLOData other) : this() {
    Name_ = other.Name_;
    High_ = other.High_;
    Low_ = other.Low_;
    Rank_ = other.Rank_;
  }

  public SLOData Clone() {
    return new SLOData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_high" field.</summary>
  public const int HighFieldNumber = 2;
  private int High_;
  public int High {
    get { return High_; }
    set {
      High_ = value;
    }
  }

  /// <summary>Field number for the "_low" field.</summary>
  public const int LowFieldNumber = 3;
  private int Low_;
  public int Low {
    get { return Low_; }
    set {
      Low_ = value;
    }
  }

  /// <summary>Field number for the "_rank" field.</summary>
  public const int RankFieldNumber = 4;
  private int Rank_;
  public int Rank {
    get { return Rank_; }
    set {
      Rank_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SLOData);
  }

  public bool Equals(SLOData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (High != other.High) return false;
    if (Low != other.Low) return false;
    if (Rank != other.Rank) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (High != 0) hash ^= High.GetHashCode();
    if (Low != 0) hash ^= Low.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (High != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(High);
    }
    if (Low != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Low);
    }
    if (Rank != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Rank);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (High != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(High);
    }
    if (Low != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Low);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    return size;
  }

  public void MergeFrom(SLOData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.High != 0) {
      High = other.High;
    }
    if (other.Low != 0) {
      Low = other.Low;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          High = input.ReadInt32();
          break;
        }
        case 24: {
          Low = input.ReadInt32();
          break;
        }
        case 32: {
          Rank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ThinDeviceData : pb::IMessage<ThinDeviceData> {
  private static readonly pb::MessageParser<ThinDeviceData> _parser = new pb::MessageParser<ThinDeviceData>(() => new ThinDeviceData());
  public static pb::MessageParser<ThinDeviceData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[9]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ThinDeviceData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ThinDeviceData(ThinDeviceData other) : this() {
    Name_ = other.Name_;
    SizeInCyl_ = other.SizeInCyl_;
    isMainFrame_ = other.isMainFrame_;
  }

  public ThinDeviceData Clone() {
    return new ThinDeviceData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_size_in_cyl" field.</summary>
  public const int SizeInCylFieldNumber = 2;
  private int SizeInCyl_;
  public int SizeInCyl {
    get { return SizeInCyl_; }
    set {
      SizeInCyl_ = value;
    }
  }

  /// <summary>Field number for the "isMainFrame" field.</summary>
  public const int IsMainFrameFieldNumber = 3;
  private bool isMainFrame_;
  public bool IsMainFrame {
    get { return isMainFrame_; }
    set {
      isMainFrame_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ThinDeviceData);
  }

  public bool Equals(ThinDeviceData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (SizeInCyl != other.SizeInCyl) return false;
    if (IsMainFrame != other.IsMainFrame) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (SizeInCyl != 0) hash ^= SizeInCyl.GetHashCode();
    if (IsMainFrame != false) hash ^= IsMainFrame.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (SizeInCyl != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SizeInCyl);
    }
    if (IsMainFrame != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsMainFrame);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (SizeInCyl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SizeInCyl);
    }
    if (IsMainFrame != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(ThinDeviceData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.SizeInCyl != 0) {
      SizeInCyl = other.SizeInCyl;
    }
    if (other.IsMainFrame != false) {
      IsMainFrame = other.IsMainFrame;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          SizeInCyl = input.ReadInt32();
          break;
        }
        case 24: {
          IsMainFrame = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DataDeviceData : pb::IMessage<DataDeviceData> {
  private static readonly pb::MessageParser<DataDeviceData> _parser = new pb::MessageParser<DataDeviceData>(() => new DataDeviceData());
  public static pb::MessageParser<DataDeviceData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[10]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DataDeviceData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DataDeviceData(DataDeviceData other) : this() {
    Name_ = other.Name_;
    sizeInGigaBytes_ = other.sizeInGigaBytes_;
    localProtection_ = other.localProtection_;
  }

  public DataDeviceData Clone() {
    return new DataDeviceData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "SizeInGigaBytes" field.</summary>
  public const int SizeInGigaBytesFieldNumber = 2;
  private double sizeInGigaBytes_;
  public double SizeInGigaBytes {
    get { return sizeInGigaBytes_; }
    set {
      sizeInGigaBytes_ = value;
    }
  }

  /// <summary>Field number for the "LocalProtection" field.</summary>
  public const int LocalProtectionFieldNumber = 3;
  private string localProtection_ = "";
  public string LocalProtection {
    get { return localProtection_; }
    set {
      localProtection_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DataDeviceData);
  }

  public bool Equals(DataDeviceData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (SizeInGigaBytes != other.SizeInGigaBytes) return false;
    if (LocalProtection != other.LocalProtection) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (SizeInGigaBytes != 0D) hash ^= SizeInGigaBytes.GetHashCode();
    if (LocalProtection.Length != 0) hash ^= LocalProtection.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (SizeInGigaBytes != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(SizeInGigaBytes);
    }
    if (LocalProtection.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(LocalProtection);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (SizeInGigaBytes != 0D) {
      size += 1 + 8;
    }
    if (LocalProtection.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalProtection);
    }
    return size;
  }

  public void MergeFrom(DataDeviceData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.SizeInGigaBytes != 0D) {
      SizeInGigaBytes = other.SizeInGigaBytes;
    }
    if (other.LocalProtection.Length != 0) {
      LocalProtection = other.LocalProtection;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 17: {
          SizeInGigaBytes = input.ReadDouble();
          break;
        }
        case 26: {
          LocalProtection = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EDiskData : pb::IMessage<EDiskData> {
  private static readonly pb::MessageParser<EDiskData> _parser = new pb::MessageParser<EDiskData>(() => new EDiskData());
  public static pb::MessageParser<EDiskData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[11]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EDiskData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EDiskData(EDiskData other) : this() {
    Name_ = other.Name_;
    Model_ = other.Model_;
    Diskgroup_ = other.Diskgroup_;
    Spindle_ = other.Spindle_;
    IsSpare_ = other.IsSpare_;
  }

  public EDiskData Clone() {
    return new EDiskData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_model" field.</summary>
  public const int ModelFieldNumber = 2;
  private string Model_ = "";
  public string Model {
    get { return Model_; }
    set {
      Model_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_diskgroup" field.</summary>
  public const int DiskgroupFieldNumber = 3;
  private string Diskgroup_ = "";
  public string Diskgroup {
    get { return Diskgroup_; }
    set {
      Diskgroup_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_spindle" field.</summary>
  public const int SpindleFieldNumber = 4;
  private string Spindle_ = "";
  public string Spindle {
    get { return Spindle_; }
    set {
      Spindle_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_isSpare" field.</summary>
  public const int IsSpareFieldNumber = 5;
  private bool IsSpare_;
  public bool IsSpare {
    get { return IsSpare_; }
    set {
      IsSpare_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EDiskData);
  }

  public bool Equals(EDiskData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Model != other.Model) return false;
    if (Diskgroup != other.Diskgroup) return false;
    if (Spindle != other.Spindle) return false;
    if (IsSpare != other.IsSpare) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Model.Length != 0) hash ^= Model.GetHashCode();
    if (Diskgroup.Length != 0) hash ^= Diskgroup.GetHashCode();
    if (Spindle.Length != 0) hash ^= Spindle.GetHashCode();
    if (IsSpare != false) hash ^= IsSpare.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Model.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Model);
    }
    if (Diskgroup.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Diskgroup);
    }
    if (Spindle.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Spindle);
    }
    if (IsSpare != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsSpare);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Model.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
    }
    if (Diskgroup.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Diskgroup);
    }
    if (Spindle.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Spindle);
    }
    if (IsSpare != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(EDiskData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Model.Length != 0) {
      Model = other.Model;
    }
    if (other.Diskgroup.Length != 0) {
      Diskgroup = other.Diskgroup;
    }
    if (other.Spindle.Length != 0) {
      Spindle = other.Spindle;
    }
    if (other.IsSpare != false) {
      IsSpare = other.IsSpare;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Model = input.ReadString();
          break;
        }
        case 26: {
          Diskgroup = input.ReadString();
          break;
        }
        case 34: {
          Spindle = input.ReadString();
          break;
        }
        case 40: {
          IsSpare = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SRPData : pb::IMessage<SRPData> {
  private static readonly pb::MessageParser<SRPData> _parser = new pb::MessageParser<SRPData>(() => new SRPData());
  public static pb::MessageParser<SRPData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[12]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SRPData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SRPData(SRPData other) : this() {
    Name_ = other.Name_;
  }

  public SRPData Clone() {
    return new SRPData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SRPData);
  }

  public bool Equals(SRPData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  public void MergeFrom(SRPData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StorageGroupData : pb::IMessage<StorageGroupData> {
  private static readonly pb::MessageParser<StorageGroupData> _parser = new pb::MessageParser<StorageGroupData>(() => new StorageGroupData());
  public static pb::MessageParser<StorageGroupData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[13]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public StorageGroupData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public StorageGroupData(StorageGroupData other) : this() {
    Name_ = other.Name_;
  }

  public StorageGroupData Clone() {
    return new StorageGroupData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as StorageGroupData);
  }

  public bool Equals(StorageGroupData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  public void MergeFrom(StorageGroupData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DiskGroupData : pb::IMessage<DiskGroupData> {
  private static readonly pb::MessageParser<DiskGroupData> _parser = new pb::MessageParser<DiskGroupData>(() => new DiskGroupData());
  public static pb::MessageParser<DiskGroupData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[14]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DiskGroupData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DiskGroupData(DiskGroupData other) : this() {
    Name_ = other.Name_;
    model_ = other.model_;
    SizeInGb_ = other.SizeInGb_;
  }

  public DiskGroupData Clone() {
    return new DiskGroupData(this);
  }

  /// <summary>Field number for the "_name" field.</summary>
  public const int NameFieldNumber = 1;
  private string Name_ = "";
  public string Name {
    get { return Name_; }
    set {
      Name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model" field.</summary>
  public const int ModelFieldNumber = 2;
  private string model_ = "";
  public string Model {
    get { return model_; }
    set {
      model_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_size_in_gb" field.</summary>
  public const int SizeInGbFieldNumber = 3;
  private double SizeInGb_;
  public double SizeInGb {
    get { return SizeInGb_; }
    set {
      SizeInGb_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DiskGroupData);
  }

  public bool Equals(DiskGroupData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Model != other.Model) return false;
    if (SizeInGb != other.SizeInGb) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Model.Length != 0) hash ^= Model.GetHashCode();
    if (SizeInGb != 0D) hash ^= SizeInGb.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Model.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Model);
    }
    if (SizeInGb != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(SizeInGb);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Model.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
    }
    if (SizeInGb != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  public void MergeFrom(DiskGroupData other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Model.Length != 0) {
      Model = other.Model;
    }
    if (other.SizeInGb != 0D) {
      SizeInGb = other.SizeInGb;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Model = input.ReadString();
          break;
        }
        case 25: {
          SizeInGb = input.ReadDouble();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StringList : pb::IMessage<StringList> {
  private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
  public static pb::MessageParser<StringList> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::VMAX3ConfigurationProtoReflection.Descriptor.MessageTypes[15]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public StringList() {
    OnConstruction();
  }

  partial void OnConstruction();

  public StringList(StringList other) : this() {
    list_ = other.list_.Clone();
  }

  public StringList Clone() {
    return new StringList(this);
  }

  /// <summary>Field number for the "list" field.</summary>
  public const int ListFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_list_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> list_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> List {
    get { return list_; }
  }

  public override bool Equals(object other) {
    return Equals(other as StringList);
  }

  public bool Equals(StringList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!list_.Equals(other.list_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= list_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    list_.WriteTo(output, _repeated_list_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += list_.CalculateSize(_repeated_list_codec);
    return size;
  }

  public void MergeFrom(StringList other) {
    if (other == null) {
      return;
    }
    list_.Add(other.list_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          list_.AddEntriesFrom(input, _repeated_list_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
